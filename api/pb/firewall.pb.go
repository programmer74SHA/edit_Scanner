// Code generated by protoc-gen-go. DO NOT EDIT.
// versions:
// 	protoc-gen-go v1.36.5
// 	protoc        v3.21.12
// source: firewall.proto

package pb

import (
	protoreflect "google.golang.org/protobuf/reflect/protoreflect"
	protoimpl "google.golang.org/protobuf/runtime/protoimpl"
	reflect "reflect"
	sync "sync"
	unsafe "unsafe"
)

const (
	// Verify that this generated code is sufficiently up-to-date.
	_ = protoimpl.EnforceVersion(20 - protoimpl.MinVersion)
	// Verify that runtime/protoimpl is sufficiently up-to-date.
	_ = protoimpl.EnforceVersion(protoimpl.MaxVersion - 20)
)

// SecondaryIP represents secondary IP addresses on interfaces
type SecondaryIP struct {
	state         protoimpl.MessageState `protogen:"open.v1"`
	Id            int32                  `protobuf:"varint,1,opt,name=id,proto3" json:"id,omitempty"`
	Ip            string                 `protobuf:"bytes,2,opt,name=ip,proto3" json:"ip,omitempty"`
	CidrPrefix    int32                  `protobuf:"varint,3,opt,name=cidr_prefix,json=cidrPrefix,proto3" json:"cidr_prefix,omitempty"`
	Allowaccess   []string               `protobuf:"bytes,4,rep,name=allowaccess,proto3" json:"allowaccess,omitempty"`
	unknownFields protoimpl.UnknownFields
	sizeCache     protoimpl.SizeCache
}

func (x *SecondaryIP) Reset() {
	*x = SecondaryIP{}
	mi := &file_firewall_proto_msgTypes[0]
	ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
	ms.StoreMessageInfo(mi)
}

func (x *SecondaryIP) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*SecondaryIP) ProtoMessage() {}

func (x *SecondaryIP) ProtoReflect() protoreflect.Message {
	mi := &file_firewall_proto_msgTypes[0]
	if x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use SecondaryIP.ProtoReflect.Descriptor instead.
func (*SecondaryIP) Descriptor() ([]byte, []int) {
	return file_firewall_proto_rawDescGZIP(), []int{0}
}

func (x *SecondaryIP) GetId() int32 {
	if x != nil {
		return x.Id
	}
	return 0
}

func (x *SecondaryIP) GetIp() string {
	if x != nil {
		return x.Ip
	}
	return ""
}

func (x *SecondaryIP) GetCidrPrefix() int32 {
	if x != nil {
		return x.CidrPrefix
	}
	return 0
}

func (x *SecondaryIP) GetAllowaccess() []string {
	if x != nil {
		return x.Allowaccess
	}
	return nil
}

// ZoneInterfaces represents interfaces assigned to zones
type ZoneInterfaces struct {
	state         protoimpl.MessageState `protogen:"open.v1"`
	InterfaceName []string               `protobuf:"bytes,1,rep,name=interface_name,json=interfaceName,proto3" json:"interface_name,omitempty"`
	VlanName      []string               `protobuf:"bytes,2,rep,name=vlan_name,json=vlanName,proto3" json:"vlan_name,omitempty"`
	unknownFields protoimpl.UnknownFields
	sizeCache     protoimpl.SizeCache
}

func (x *ZoneInterfaces) Reset() {
	*x = ZoneInterfaces{}
	mi := &file_firewall_proto_msgTypes[1]
	ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
	ms.StoreMessageInfo(mi)
}

func (x *ZoneInterfaces) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*ZoneInterfaces) ProtoMessage() {}

func (x *ZoneInterfaces) ProtoReflect() protoreflect.Message {
	mi := &file_firewall_proto_msgTypes[1]
	if x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use ZoneInterfaces.ProtoReflect.Descriptor instead.
func (*ZoneInterfaces) Descriptor() ([]byte, []int) {
	return file_firewall_proto_rawDescGZIP(), []int{1}
}

func (x *ZoneInterfaces) GetInterfaceName() []string {
	if x != nil {
		return x.InterfaceName
	}
	return nil
}

func (x *ZoneInterfaces) GetVlanName() []string {
	if x != nil {
		return x.VlanName
	}
	return nil
}

// FirewallAsset represents the main firewall asset
type FirewallAsset struct {
	state            protoimpl.MessageState `protogen:"open.v1"`
	Id               string                 `protobuf:"bytes,1,opt,name=id,proto3" json:"id,omitempty"`
	VendorCode       string                 `protobuf:"bytes,2,opt,name=vendor_code,json=vendorCode,proto3" json:"vendor_code,omitempty"`
	Name             string                 `protobuf:"bytes,3,opt,name=name,proto3" json:"name,omitempty"`
	Domain           string                 `protobuf:"bytes,4,opt,name=domain,proto3" json:"domain,omitempty"`
	Hostname         string                 `protobuf:"bytes,5,opt,name=hostname,proto3" json:"hostname,omitempty"`
	OsName           string                 `protobuf:"bytes,6,opt,name=os_name,json=osName,proto3" json:"os_name,omitempty"`
	OsVersion        string                 `protobuf:"bytes,7,opt,name=os_version,json=osVersion,proto3" json:"os_version,omitempty"`
	Description      string                 `protobuf:"bytes,8,opt,name=description,proto3" json:"description,omitempty"`
	AssetType        string                 `protobuf:"bytes,9,opt,name=asset_type,json=assetType,proto3" json:"asset_type,omitempty"`
	DiscoveredBy     string                 `protobuf:"bytes,10,opt,name=discovered_by,json=discoveredBy,proto3" json:"discovered_by,omitempty"`
	Risk             int32                  `protobuf:"varint,11,opt,name=risk,proto3" json:"risk,omitempty"`
	LoggingCompleted bool                   `protobuf:"varint,12,opt,name=logging_completed,json=loggingCompleted,proto3" json:"logging_completed,omitempty"`
	AssetValue       float64                `protobuf:"fixed64,13,opt,name=asset_value,json=assetValue,proto3" json:"asset_value,omitempty"`
	unknownFields    protoimpl.UnknownFields
	sizeCache        protoimpl.SizeCache
}

func (x *FirewallAsset) Reset() {
	*x = FirewallAsset{}
	mi := &file_firewall_proto_msgTypes[2]
	ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
	ms.StoreMessageInfo(mi)
}

func (x *FirewallAsset) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*FirewallAsset) ProtoMessage() {}

func (x *FirewallAsset) ProtoReflect() protoreflect.Message {
	mi := &file_firewall_proto_msgTypes[2]
	if x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use FirewallAsset.ProtoReflect.Descriptor instead.
func (*FirewallAsset) Descriptor() ([]byte, []int) {
	return file_firewall_proto_rawDescGZIP(), []int{2}
}

func (x *FirewallAsset) GetId() string {
	if x != nil {
		return x.Id
	}
	return ""
}

func (x *FirewallAsset) GetVendorCode() string {
	if x != nil {
		return x.VendorCode
	}
	return ""
}

func (x *FirewallAsset) GetName() string {
	if x != nil {
		return x.Name
	}
	return ""
}

func (x *FirewallAsset) GetDomain() string {
	if x != nil {
		return x.Domain
	}
	return ""
}

func (x *FirewallAsset) GetHostname() string {
	if x != nil {
		return x.Hostname
	}
	return ""
}

func (x *FirewallAsset) GetOsName() string {
	if x != nil {
		return x.OsName
	}
	return ""
}

func (x *FirewallAsset) GetOsVersion() string {
	if x != nil {
		return x.OsVersion
	}
	return ""
}

func (x *FirewallAsset) GetDescription() string {
	if x != nil {
		return x.Description
	}
	return ""
}

func (x *FirewallAsset) GetAssetType() string {
	if x != nil {
		return x.AssetType
	}
	return ""
}

func (x *FirewallAsset) GetDiscoveredBy() string {
	if x != nil {
		return x.DiscoveredBy
	}
	return ""
}

func (x *FirewallAsset) GetRisk() int32 {
	if x != nil {
		return x.Risk
	}
	return 0
}

func (x *FirewallAsset) GetLoggingCompleted() bool {
	if x != nil {
		return x.LoggingCompleted
	}
	return false
}

func (x *FirewallAsset) GetAssetValue() float64 {
	if x != nil {
		return x.AssetValue
	}
	return 0
}

// FirewallDetails represents specific firewall configuration details
type FirewallDetails struct {
	state           protoimpl.MessageState `protogen:"open.v1"`
	Id              string                 `protobuf:"bytes,1,opt,name=id,proto3" json:"id,omitempty"`
	AssetId         string                 `protobuf:"bytes,2,opt,name=asset_id,json=assetId,proto3" json:"asset_id,omitempty"`
	Model           string                 `protobuf:"bytes,3,opt,name=model,proto3" json:"model,omitempty"`
	FirmwareVersion string                 `protobuf:"bytes,4,opt,name=firmware_version,json=firmwareVersion,proto3" json:"firmware_version,omitempty"`
	SerialNumber    string                 `protobuf:"bytes,5,opt,name=serial_number,json=serialNumber,proto3" json:"serial_number,omitempty"`
	IsHaEnabled     bool                   `protobuf:"varint,6,opt,name=is_ha_enabled,json=isHaEnabled,proto3" json:"is_ha_enabled,omitempty"`
	HaRole          string                 `protobuf:"bytes,7,opt,name=ha_role,json=haRole,proto3" json:"ha_role,omitempty"`
	ManagementIp    string                 `protobuf:"bytes,8,opt,name=management_ip,json=managementIp,proto3" json:"management_ip,omitempty"`
	SiteName        string                 `protobuf:"bytes,9,opt,name=site_name,json=siteName,proto3" json:"site_name,omitempty"`
	Location        string                 `protobuf:"bytes,10,opt,name=location,proto3" json:"location,omitempty"`
	Status          string                 `protobuf:"bytes,11,opt,name=status,proto3" json:"status,omitempty"`
	LastSync        string                 `protobuf:"bytes,12,opt,name=last_sync,json=lastSync,proto3" json:"last_sync,omitempty"`
	SyncStatus      string                 `protobuf:"bytes,13,opt,name=sync_status,json=syncStatus,proto3" json:"sync_status,omitempty"`
	unknownFields   protoimpl.UnknownFields
	sizeCache       protoimpl.SizeCache
}

func (x *FirewallDetails) Reset() {
	*x = FirewallDetails{}
	mi := &file_firewall_proto_msgTypes[3]
	ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
	ms.StoreMessageInfo(mi)
}

func (x *FirewallDetails) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*FirewallDetails) ProtoMessage() {}

func (x *FirewallDetails) ProtoReflect() protoreflect.Message {
	mi := &file_firewall_proto_msgTypes[3]
	if x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use FirewallDetails.ProtoReflect.Descriptor instead.
func (*FirewallDetails) Descriptor() ([]byte, []int) {
	return file_firewall_proto_rawDescGZIP(), []int{3}
}

func (x *FirewallDetails) GetId() string {
	if x != nil {
		return x.Id
	}
	return ""
}

func (x *FirewallDetails) GetAssetId() string {
	if x != nil {
		return x.AssetId
	}
	return ""
}

func (x *FirewallDetails) GetModel() string {
	if x != nil {
		return x.Model
	}
	return ""
}

func (x *FirewallDetails) GetFirmwareVersion() string {
	if x != nil {
		return x.FirmwareVersion
	}
	return ""
}

func (x *FirewallDetails) GetSerialNumber() string {
	if x != nil {
		return x.SerialNumber
	}
	return ""
}

func (x *FirewallDetails) GetIsHaEnabled() bool {
	if x != nil {
		return x.IsHaEnabled
	}
	return false
}

func (x *FirewallDetails) GetHaRole() string {
	if x != nil {
		return x.HaRole
	}
	return ""
}

func (x *FirewallDetails) GetManagementIp() string {
	if x != nil {
		return x.ManagementIp
	}
	return ""
}

func (x *FirewallDetails) GetSiteName() string {
	if x != nil {
		return x.SiteName
	}
	return ""
}

func (x *FirewallDetails) GetLocation() string {
	if x != nil {
		return x.Location
	}
	return ""
}

func (x *FirewallDetails) GetStatus() string {
	if x != nil {
		return x.Status
	}
	return ""
}

func (x *FirewallDetails) GetLastSync() string {
	if x != nil {
		return x.LastSync
	}
	return ""
}

func (x *FirewallDetails) GetSyncStatus() string {
	if x != nil {
		return x.SyncStatus
	}
	return ""
}

// FirewallZone represents security zones in the firewall
type FirewallZone struct {
	state                 protoimpl.MessageState `protogen:"open.v1"`
	Id                    string                 `protobuf:"bytes,1,opt,name=id,proto3" json:"id,omitempty"`
	ZoneName              string                 `protobuf:"bytes,2,opt,name=zone_name,json=zoneName,proto3" json:"zone_name,omitempty"`
	ZoneType              string                 `protobuf:"bytes,3,opt,name=zone_type,json=zoneType,proto3" json:"zone_type,omitempty"`
	VendorZoneType        string                 `protobuf:"bytes,4,opt,name=vendor_zone_type,json=vendorZoneType,proto3" json:"vendor_zone_type,omitempty"`
	Description           string                 `protobuf:"bytes,5,opt,name=description,proto3" json:"description,omitempty"`
	ZoneMode              string                 `protobuf:"bytes,6,opt,name=zone_mode,json=zoneMode,proto3" json:"zone_mode,omitempty"`
	IntrazoneAction       string                 `protobuf:"bytes,7,opt,name=intrazone_action,json=intrazoneAction,proto3" json:"intrazone_action,omitempty"`
	ZoneProtectionProfile string                 `protobuf:"bytes,8,opt,name=zone_protection_profile,json=zoneProtectionProfile,proto3" json:"zone_protection_profile,omitempty"`
	LogSetting            string                 `protobuf:"bytes,9,opt,name=log_setting,json=logSetting,proto3" json:"log_setting,omitempty"`
	Interfaces            *ZoneInterfaces        `protobuf:"bytes,10,opt,name=interfaces,proto3" json:"interfaces,omitempty"`
	unknownFields         protoimpl.UnknownFields
	sizeCache             protoimpl.SizeCache
}

func (x *FirewallZone) Reset() {
	*x = FirewallZone{}
	mi := &file_firewall_proto_msgTypes[4]
	ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
	ms.StoreMessageInfo(mi)
}

func (x *FirewallZone) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*FirewallZone) ProtoMessage() {}

func (x *FirewallZone) ProtoReflect() protoreflect.Message {
	mi := &file_firewall_proto_msgTypes[4]
	if x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use FirewallZone.ProtoReflect.Descriptor instead.
func (*FirewallZone) Descriptor() ([]byte, []int) {
	return file_firewall_proto_rawDescGZIP(), []int{4}
}

func (x *FirewallZone) GetId() string {
	if x != nil {
		return x.Id
	}
	return ""
}

func (x *FirewallZone) GetZoneName() string {
	if x != nil {
		return x.ZoneName
	}
	return ""
}

func (x *FirewallZone) GetZoneType() string {
	if x != nil {
		return x.ZoneType
	}
	return ""
}

func (x *FirewallZone) GetVendorZoneType() string {
	if x != nil {
		return x.VendorZoneType
	}
	return ""
}

func (x *FirewallZone) GetDescription() string {
	if x != nil {
		return x.Description
	}
	return ""
}

func (x *FirewallZone) GetZoneMode() string {
	if x != nil {
		return x.ZoneMode
	}
	return ""
}

func (x *FirewallZone) GetIntrazoneAction() string {
	if x != nil {
		return x.IntrazoneAction
	}
	return ""
}

func (x *FirewallZone) GetZoneProtectionProfile() string {
	if x != nil {
		return x.ZoneProtectionProfile
	}
	return ""
}

func (x *FirewallZone) GetLogSetting() string {
	if x != nil {
		return x.LogSetting
	}
	return ""
}

func (x *FirewallZone) GetInterfaces() *ZoneInterfaces {
	if x != nil {
		return x.Interfaces
	}
	return nil
}

// FirewallInterface represents network interfaces
type FirewallInterface struct {
	state                protoimpl.MessageState `protogen:"open.v1"`
	Id                   string                 `protobuf:"bytes,1,opt,name=id,proto3" json:"id,omitempty"`
	InterfaceName        string                 `protobuf:"bytes,2,opt,name=interface_name,json=interfaceName,proto3" json:"interface_name,omitempty"`
	InterfaceType        string                 `protobuf:"bytes,3,opt,name=interface_type,json=interfaceType,proto3" json:"interface_type,omitempty"`
	VirtualRouter        string                 `protobuf:"bytes,4,opt,name=virtual_router,json=virtualRouter,proto3" json:"virtual_router,omitempty"`
	VirtualSystem        string                 `protobuf:"bytes,5,opt,name=virtual_system,json=virtualSystem,proto3" json:"virtual_system,omitempty"`
	Description          string                 `protobuf:"bytes,6,opt,name=description,proto3" json:"description,omitempty"`
	OperationalStatus    string                 `protobuf:"bytes,7,opt,name=operational_status,json=operationalStatus,proto3" json:"operational_status,omitempty"`
	AdminStatus          string                 `protobuf:"bytes,8,opt,name=admin_status,json=adminStatus,proto3" json:"admin_status,omitempty"`
	ParentInterfaceName  string                 `protobuf:"bytes,9,opt,name=parent_interface_name,json=parentInterfaceName,proto3" json:"parent_interface_name,omitempty"`
	VlanId               int32                  `protobuf:"varint,10,opt,name=vlan_id,json=vlanId,proto3" json:"vlan_id,omitempty"`
	MacAddress           string                 `protobuf:"bytes,11,opt,name=mac_address,json=macAddress,proto3" json:"mac_address,omitempty"`
	VendorSpecificConfig string                 `protobuf:"bytes,12,opt,name=vendor_specific_config,json=vendorSpecificConfig,proto3" json:"vendor_specific_config,omitempty"`
	SecondaryIps         []*SecondaryIP         `protobuf:"bytes,13,rep,name=secondary_ips,json=secondaryIps,proto3" json:"secondary_ips,omitempty"`
	PrimaryIp            string                 `protobuf:"bytes,14,opt,name=primary_ip,json=primaryIp,proto3" json:"primary_ip,omitempty"`
	CidrPrefix           int32                  `protobuf:"varint,15,opt,name=cidr_prefix,json=cidrPrefix,proto3" json:"cidr_prefix,omitempty"`
	unknownFields        protoimpl.UnknownFields
	sizeCache            protoimpl.SizeCache
}

func (x *FirewallInterface) Reset() {
	*x = FirewallInterface{}
	mi := &file_firewall_proto_msgTypes[5]
	ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
	ms.StoreMessageInfo(mi)
}

func (x *FirewallInterface) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*FirewallInterface) ProtoMessage() {}

func (x *FirewallInterface) ProtoReflect() protoreflect.Message {
	mi := &file_firewall_proto_msgTypes[5]
	if x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use FirewallInterface.ProtoReflect.Descriptor instead.
func (*FirewallInterface) Descriptor() ([]byte, []int) {
	return file_firewall_proto_rawDescGZIP(), []int{5}
}

func (x *FirewallInterface) GetId() string {
	if x != nil {
		return x.Id
	}
	return ""
}

func (x *FirewallInterface) GetInterfaceName() string {
	if x != nil {
		return x.InterfaceName
	}
	return ""
}

func (x *FirewallInterface) GetInterfaceType() string {
	if x != nil {
		return x.InterfaceType
	}
	return ""
}

func (x *FirewallInterface) GetVirtualRouter() string {
	if x != nil {
		return x.VirtualRouter
	}
	return ""
}

func (x *FirewallInterface) GetVirtualSystem() string {
	if x != nil {
		return x.VirtualSystem
	}
	return ""
}

func (x *FirewallInterface) GetDescription() string {
	if x != nil {
		return x.Description
	}
	return ""
}

func (x *FirewallInterface) GetOperationalStatus() string {
	if x != nil {
		return x.OperationalStatus
	}
	return ""
}

func (x *FirewallInterface) GetAdminStatus() string {
	if x != nil {
		return x.AdminStatus
	}
	return ""
}

func (x *FirewallInterface) GetParentInterfaceName() string {
	if x != nil {
		return x.ParentInterfaceName
	}
	return ""
}

func (x *FirewallInterface) GetVlanId() int32 {
	if x != nil {
		return x.VlanId
	}
	return 0
}

func (x *FirewallInterface) GetMacAddress() string {
	if x != nil {
		return x.MacAddress
	}
	return ""
}

func (x *FirewallInterface) GetVendorSpecificConfig() string {
	if x != nil {
		return x.VendorSpecificConfig
	}
	return ""
}

func (x *FirewallInterface) GetSecondaryIps() []*SecondaryIP {
	if x != nil {
		return x.SecondaryIps
	}
	return nil
}

func (x *FirewallInterface) GetPrimaryIp() string {
	if x != nil {
		return x.PrimaryIp
	}
	return ""
}

func (x *FirewallInterface) GetCidrPrefix() int32 {
	if x != nil {
		return x.CidrPrefix
	}
	return 0
}

// FirewallVLAN represents VLANs configured on the firewall
type FirewallVLAN struct {
	state                protoimpl.MessageState `protogen:"open.v1"`
	Id                   string                 `protobuf:"bytes,1,opt,name=id,proto3" json:"id,omitempty"`
	VlanNumber           int32                  `protobuf:"varint,2,opt,name=vlan_number,json=vlanNumber,proto3" json:"vlan_number,omitempty"`
	VlanName             string                 `protobuf:"bytes,3,opt,name=vlan_name,json=vlanName,proto3" json:"vlan_name,omitempty"`
	Description          string                 `protobuf:"bytes,4,opt,name=description,proto3" json:"description,omitempty"`
	IsNative             bool                   `protobuf:"varint,5,opt,name=is_native,json=isNative,proto3" json:"is_native,omitempty"`
	VendorSpecificConfig string                 `protobuf:"bytes,6,opt,name=vendor_specific_config,json=vendorSpecificConfig,proto3" json:"vendor_specific_config,omitempty"`
	Interfaces           []string               `protobuf:"bytes,7,rep,name=interfaces,proto3" json:"interfaces,omitempty"`
	unknownFields        protoimpl.UnknownFields
	sizeCache            protoimpl.SizeCache
}

func (x *FirewallVLAN) Reset() {
	*x = FirewallVLAN{}
	mi := &file_firewall_proto_msgTypes[6]
	ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
	ms.StoreMessageInfo(mi)
}

func (x *FirewallVLAN) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*FirewallVLAN) ProtoMessage() {}

func (x *FirewallVLAN) ProtoReflect() protoreflect.Message {
	mi := &file_firewall_proto_msgTypes[6]
	if x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use FirewallVLAN.ProtoReflect.Descriptor instead.
func (*FirewallVLAN) Descriptor() ([]byte, []int) {
	return file_firewall_proto_rawDescGZIP(), []int{6}
}

func (x *FirewallVLAN) GetId() string {
	if x != nil {
		return x.Id
	}
	return ""
}

func (x *FirewallVLAN) GetVlanNumber() int32 {
	if x != nil {
		return x.VlanNumber
	}
	return 0
}

func (x *FirewallVLAN) GetVlanName() string {
	if x != nil {
		return x.VlanName
	}
	return ""
}

func (x *FirewallVLAN) GetDescription() string {
	if x != nil {
		return x.Description
	}
	return ""
}

func (x *FirewallVLAN) GetIsNative() bool {
	if x != nil {
		return x.IsNative
	}
	return false
}

func (x *FirewallVLAN) GetVendorSpecificConfig() string {
	if x != nil {
		return x.VendorSpecificConfig
	}
	return ""
}

func (x *FirewallVLAN) GetInterfaces() []string {
	if x != nil {
		return x.Interfaces
	}
	return nil
}

// FirewallPolicy represents firewall security policies
type FirewallPolicy struct {
	state                protoimpl.MessageState `protogen:"open.v1"`
	Id                   string                 `protobuf:"bytes,1,opt,name=id,proto3" json:"id,omitempty"`
	PolicyName           string                 `protobuf:"bytes,2,opt,name=policy_name,json=policyName,proto3" json:"policy_name,omitempty"`
	PolicyId             int32                  `protobuf:"varint,3,opt,name=policy_id,json=policyId,proto3" json:"policy_id,omitempty"`
	SrcAddresses         []string               `protobuf:"bytes,4,rep,name=src_addresses,json=srcAddresses,proto3" json:"src_addresses,omitempty"`
	DstAddresses         []string               `protobuf:"bytes,5,rep,name=dst_addresses,json=dstAddresses,proto3" json:"dst_addresses,omitempty"`
	Services             []string               `protobuf:"bytes,6,rep,name=services,proto3" json:"services,omitempty"`
	Action               string                 `protobuf:"bytes,7,opt,name=action,proto3" json:"action,omitempty"`
	PolicyType           string                 `protobuf:"bytes,8,opt,name=policy_type,json=policyType,proto3" json:"policy_type,omitempty"`
	Status               string                 `protobuf:"bytes,9,opt,name=status,proto3" json:"status,omitempty"`
	RuleOrder            int32                  `protobuf:"varint,10,opt,name=rule_order,json=ruleOrder,proto3" json:"rule_order,omitempty"`
	VendorSpecificConfig string                 `protobuf:"bytes,11,opt,name=vendor_specific_config,json=vendorSpecificConfig,proto3" json:"vendor_specific_config,omitempty"`
	Schedule             string                 `protobuf:"bytes,12,opt,name=schedule,proto3" json:"schedule,omitempty"`
	unknownFields        protoimpl.UnknownFields
	sizeCache            protoimpl.SizeCache
}

func (x *FirewallPolicy) Reset() {
	*x = FirewallPolicy{}
	mi := &file_firewall_proto_msgTypes[7]
	ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
	ms.StoreMessageInfo(mi)
}

func (x *FirewallPolicy) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*FirewallPolicy) ProtoMessage() {}

func (x *FirewallPolicy) ProtoReflect() protoreflect.Message {
	mi := &file_firewall_proto_msgTypes[7]
	if x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use FirewallPolicy.ProtoReflect.Descriptor instead.
func (*FirewallPolicy) Descriptor() ([]byte, []int) {
	return file_firewall_proto_rawDescGZIP(), []int{7}
}

func (x *FirewallPolicy) GetId() string {
	if x != nil {
		return x.Id
	}
	return ""
}

func (x *FirewallPolicy) GetPolicyName() string {
	if x != nil {
		return x.PolicyName
	}
	return ""
}

func (x *FirewallPolicy) GetPolicyId() int32 {
	if x != nil {
		return x.PolicyId
	}
	return 0
}

func (x *FirewallPolicy) GetSrcAddresses() []string {
	if x != nil {
		return x.SrcAddresses
	}
	return nil
}

func (x *FirewallPolicy) GetDstAddresses() []string {
	if x != nil {
		return x.DstAddresses
	}
	return nil
}

func (x *FirewallPolicy) GetServices() []string {
	if x != nil {
		return x.Services
	}
	return nil
}

func (x *FirewallPolicy) GetAction() string {
	if x != nil {
		return x.Action
	}
	return ""
}

func (x *FirewallPolicy) GetPolicyType() string {
	if x != nil {
		return x.PolicyType
	}
	return ""
}

func (x *FirewallPolicy) GetStatus() string {
	if x != nil {
		return x.Status
	}
	return ""
}

func (x *FirewallPolicy) GetRuleOrder() int32 {
	if x != nil {
		return x.RuleOrder
	}
	return 0
}

func (x *FirewallPolicy) GetVendorSpecificConfig() string {
	if x != nil {
		return x.VendorSpecificConfig
	}
	return ""
}

func (x *FirewallPolicy) GetSchedule() string {
	if x != nil {
		return x.Schedule
	}
	return ""
}

// Firewall represents the complete firewall configuration
type Firewall struct {
	state         protoimpl.MessageState `protogen:"open.v1"`
	Asset         *FirewallAsset         `protobuf:"bytes,1,opt,name=asset,proto3" json:"asset,omitempty"`
	Details       *FirewallDetails       `protobuf:"bytes,2,opt,name=details,proto3" json:"details,omitempty"`
	Zones         []*FirewallZone        `protobuf:"bytes,3,rep,name=zones,proto3" json:"zones,omitempty"`
	Interfaces    []*FirewallInterface   `protobuf:"bytes,4,rep,name=interfaces,proto3" json:"interfaces,omitempty"`
	Vlans         []*FirewallVLAN        `protobuf:"bytes,5,rep,name=vlans,proto3" json:"vlans,omitempty"`
	Policies      []*FirewallPolicy      `protobuf:"bytes,6,rep,name=policies,proto3" json:"policies,omitempty"`
	unknownFields protoimpl.UnknownFields
	sizeCache     protoimpl.SizeCache
}

func (x *Firewall) Reset() {
	*x = Firewall{}
	mi := &file_firewall_proto_msgTypes[8]
	ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
	ms.StoreMessageInfo(mi)
}

func (x *Firewall) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*Firewall) ProtoMessage() {}

func (x *Firewall) ProtoReflect() protoreflect.Message {
	mi := &file_firewall_proto_msgTypes[8]
	if x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use Firewall.ProtoReflect.Descriptor instead.
func (*Firewall) Descriptor() ([]byte, []int) {
	return file_firewall_proto_rawDescGZIP(), []int{8}
}

func (x *Firewall) GetAsset() *FirewallAsset {
	if x != nil {
		return x.Asset
	}
	return nil
}

func (x *Firewall) GetDetails() *FirewallDetails {
	if x != nil {
		return x.Details
	}
	return nil
}

func (x *Firewall) GetZones() []*FirewallZone {
	if x != nil {
		return x.Zones
	}
	return nil
}

func (x *Firewall) GetInterfaces() []*FirewallInterface {
	if x != nil {
		return x.Interfaces
	}
	return nil
}

func (x *Firewall) GetVlans() []*FirewallVLAN {
	if x != nil {
		return x.Vlans
	}
	return nil
}

func (x *Firewall) GetPolicies() []*FirewallPolicy {
	if x != nil {
		return x.Policies
	}
	return nil
}

// Request and Response messages
type CreateFirewallRequest struct {
	state         protoimpl.MessageState `protogen:"open.v1"`
	Asset         *FirewallAsset         `protobuf:"bytes,1,opt,name=asset,proto3" json:"asset,omitempty"`
	Details       *FirewallDetails       `protobuf:"bytes,2,opt,name=details,proto3" json:"details,omitempty"`
	Zones         []*FirewallZone        `protobuf:"bytes,3,rep,name=zones,proto3" json:"zones,omitempty"`
	Interfaces    []*FirewallInterface   `protobuf:"bytes,4,rep,name=interfaces,proto3" json:"interfaces,omitempty"`
	Vlans         []*FirewallVLAN        `protobuf:"bytes,5,rep,name=vlans,proto3" json:"vlans,omitempty"`
	Policies      []*FirewallPolicy      `protobuf:"bytes,6,rep,name=policies,proto3" json:"policies,omitempty"`
	unknownFields protoimpl.UnknownFields
	sizeCache     protoimpl.SizeCache
}

func (x *CreateFirewallRequest) Reset() {
	*x = CreateFirewallRequest{}
	mi := &file_firewall_proto_msgTypes[9]
	ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
	ms.StoreMessageInfo(mi)
}

func (x *CreateFirewallRequest) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*CreateFirewallRequest) ProtoMessage() {}

func (x *CreateFirewallRequest) ProtoReflect() protoreflect.Message {
	mi := &file_firewall_proto_msgTypes[9]
	if x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use CreateFirewallRequest.ProtoReflect.Descriptor instead.
func (*CreateFirewallRequest) Descriptor() ([]byte, []int) {
	return file_firewall_proto_rawDescGZIP(), []int{9}
}

func (x *CreateFirewallRequest) GetAsset() *FirewallAsset {
	if x != nil {
		return x.Asset
	}
	return nil
}

func (x *CreateFirewallRequest) GetDetails() *FirewallDetails {
	if x != nil {
		return x.Details
	}
	return nil
}

func (x *CreateFirewallRequest) GetZones() []*FirewallZone {
	if x != nil {
		return x.Zones
	}
	return nil
}

func (x *CreateFirewallRequest) GetInterfaces() []*FirewallInterface {
	if x != nil {
		return x.Interfaces
	}
	return nil
}

func (x *CreateFirewallRequest) GetVlans() []*FirewallVLAN {
	if x != nil {
		return x.Vlans
	}
	return nil
}

func (x *CreateFirewallRequest) GetPolicies() []*FirewallPolicy {
	if x != nil {
		return x.Policies
	}
	return nil
}

type CreateFirewallResponse struct {
	state         protoimpl.MessageState `protogen:"open.v1"`
	Id            string                 `protobuf:"bytes,1,opt,name=id,proto3" json:"id,omitempty"`
	Success       bool                   `protobuf:"varint,2,opt,name=success,proto3" json:"success,omitempty"`
	Message       string                 `protobuf:"bytes,3,opt,name=message,proto3" json:"message,omitempty"`
	unknownFields protoimpl.UnknownFields
	sizeCache     protoimpl.SizeCache
}

func (x *CreateFirewallResponse) Reset() {
	*x = CreateFirewallResponse{}
	mi := &file_firewall_proto_msgTypes[10]
	ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
	ms.StoreMessageInfo(mi)
}

func (x *CreateFirewallResponse) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*CreateFirewallResponse) ProtoMessage() {}

func (x *CreateFirewallResponse) ProtoReflect() protoreflect.Message {
	mi := &file_firewall_proto_msgTypes[10]
	if x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use CreateFirewallResponse.ProtoReflect.Descriptor instead.
func (*CreateFirewallResponse) Descriptor() ([]byte, []int) {
	return file_firewall_proto_rawDescGZIP(), []int{10}
}

func (x *CreateFirewallResponse) GetId() string {
	if x != nil {
		return x.Id
	}
	return ""
}

func (x *CreateFirewallResponse) GetSuccess() bool {
	if x != nil {
		return x.Success
	}
	return false
}

func (x *CreateFirewallResponse) GetMessage() string {
	if x != nil {
		return x.Message
	}
	return ""
}

type GetFirewallByIDRequest struct {
	state         protoimpl.MessageState `protogen:"open.v1"`
	Id            string                 `protobuf:"bytes,1,opt,name=id,proto3" json:"id,omitempty"`
	unknownFields protoimpl.UnknownFields
	sizeCache     protoimpl.SizeCache
}

func (x *GetFirewallByIDRequest) Reset() {
	*x = GetFirewallByIDRequest{}
	mi := &file_firewall_proto_msgTypes[11]
	ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
	ms.StoreMessageInfo(mi)
}

func (x *GetFirewallByIDRequest) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*GetFirewallByIDRequest) ProtoMessage() {}

func (x *GetFirewallByIDRequest) ProtoReflect() protoreflect.Message {
	mi := &file_firewall_proto_msgTypes[11]
	if x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use GetFirewallByIDRequest.ProtoReflect.Descriptor instead.
func (*GetFirewallByIDRequest) Descriptor() ([]byte, []int) {
	return file_firewall_proto_rawDescGZIP(), []int{11}
}

func (x *GetFirewallByIDRequest) GetId() string {
	if x != nil {
		return x.Id
	}
	return ""
}

type GetFirewallByIDResponse struct {
	state         protoimpl.MessageState `protogen:"open.v1"`
	Success       bool                   `protobuf:"varint,1,opt,name=success,proto3" json:"success,omitempty"`
	Message       string                 `protobuf:"bytes,2,opt,name=message,proto3" json:"message,omitempty"`
	Firewall      *Firewall              `protobuf:"bytes,3,opt,name=firewall,proto3" json:"firewall,omitempty"`
	unknownFields protoimpl.UnknownFields
	sizeCache     protoimpl.SizeCache
}

func (x *GetFirewallByIDResponse) Reset() {
	*x = GetFirewallByIDResponse{}
	mi := &file_firewall_proto_msgTypes[12]
	ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
	ms.StoreMessageInfo(mi)
}

func (x *GetFirewallByIDResponse) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*GetFirewallByIDResponse) ProtoMessage() {}

func (x *GetFirewallByIDResponse) ProtoReflect() protoreflect.Message {
	mi := &file_firewall_proto_msgTypes[12]
	if x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use GetFirewallByIDResponse.ProtoReflect.Descriptor instead.
func (*GetFirewallByIDResponse) Descriptor() ([]byte, []int) {
	return file_firewall_proto_rawDescGZIP(), []int{12}
}

func (x *GetFirewallByIDResponse) GetSuccess() bool {
	if x != nil {
		return x.Success
	}
	return false
}

func (x *GetFirewallByIDResponse) GetMessage() string {
	if x != nil {
		return x.Message
	}
	return ""
}

func (x *GetFirewallByIDResponse) GetFirewall() *Firewall {
	if x != nil {
		return x.Firewall
	}
	return nil
}

type UpdateFirewallRequest struct {
	state         protoimpl.MessageState `protogen:"open.v1"`
	Id            string                 `protobuf:"bytes,1,opt,name=id,proto3" json:"id,omitempty"`
	Asset         *FirewallAsset         `protobuf:"bytes,2,opt,name=asset,proto3" json:"asset,omitempty"`
	Details       *FirewallDetails       `protobuf:"bytes,3,opt,name=details,proto3" json:"details,omitempty"`
	Zones         []*FirewallZone        `protobuf:"bytes,4,rep,name=zones,proto3" json:"zones,omitempty"`
	Interfaces    []*FirewallInterface   `protobuf:"bytes,5,rep,name=interfaces,proto3" json:"interfaces,omitempty"`
	Vlans         []*FirewallVLAN        `protobuf:"bytes,6,rep,name=vlans,proto3" json:"vlans,omitempty"`
	Policies      []*FirewallPolicy      `protobuf:"bytes,7,rep,name=policies,proto3" json:"policies,omitempty"`
	unknownFields protoimpl.UnknownFields
	sizeCache     protoimpl.SizeCache
}

func (x *UpdateFirewallRequest) Reset() {
	*x = UpdateFirewallRequest{}
	mi := &file_firewall_proto_msgTypes[13]
	ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
	ms.StoreMessageInfo(mi)
}

func (x *UpdateFirewallRequest) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*UpdateFirewallRequest) ProtoMessage() {}

func (x *UpdateFirewallRequest) ProtoReflect() protoreflect.Message {
	mi := &file_firewall_proto_msgTypes[13]
	if x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use UpdateFirewallRequest.ProtoReflect.Descriptor instead.
func (*UpdateFirewallRequest) Descriptor() ([]byte, []int) {
	return file_firewall_proto_rawDescGZIP(), []int{13}
}

func (x *UpdateFirewallRequest) GetId() string {
	if x != nil {
		return x.Id
	}
	return ""
}

func (x *UpdateFirewallRequest) GetAsset() *FirewallAsset {
	if x != nil {
		return x.Asset
	}
	return nil
}

func (x *UpdateFirewallRequest) GetDetails() *FirewallDetails {
	if x != nil {
		return x.Details
	}
	return nil
}

func (x *UpdateFirewallRequest) GetZones() []*FirewallZone {
	if x != nil {
		return x.Zones
	}
	return nil
}

func (x *UpdateFirewallRequest) GetInterfaces() []*FirewallInterface {
	if x != nil {
		return x.Interfaces
	}
	return nil
}

func (x *UpdateFirewallRequest) GetVlans() []*FirewallVLAN {
	if x != nil {
		return x.Vlans
	}
	return nil
}

func (x *UpdateFirewallRequest) GetPolicies() []*FirewallPolicy {
	if x != nil {
		return x.Policies
	}
	return nil
}

type UpdateFirewallResponse struct {
	state         protoimpl.MessageState `protogen:"open.v1"`
	Success       bool                   `protobuf:"varint,1,opt,name=success,proto3" json:"success,omitempty"`
	Message       string                 `protobuf:"bytes,2,opt,name=message,proto3" json:"message,omitempty"`
	unknownFields protoimpl.UnknownFields
	sizeCache     protoimpl.SizeCache
}

func (x *UpdateFirewallResponse) Reset() {
	*x = UpdateFirewallResponse{}
	mi := &file_firewall_proto_msgTypes[14]
	ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
	ms.StoreMessageInfo(mi)
}

func (x *UpdateFirewallResponse) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*UpdateFirewallResponse) ProtoMessage() {}

func (x *UpdateFirewallResponse) ProtoReflect() protoreflect.Message {
	mi := &file_firewall_proto_msgTypes[14]
	if x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use UpdateFirewallResponse.ProtoReflect.Descriptor instead.
func (*UpdateFirewallResponse) Descriptor() ([]byte, []int) {
	return file_firewall_proto_rawDescGZIP(), []int{14}
}

func (x *UpdateFirewallResponse) GetSuccess() bool {
	if x != nil {
		return x.Success
	}
	return false
}

func (x *UpdateFirewallResponse) GetMessage() string {
	if x != nil {
		return x.Message
	}
	return ""
}

type DeleteFirewallRequest struct {
	state         protoimpl.MessageState `protogen:"open.v1"`
	Id            string                 `protobuf:"bytes,1,opt,name=id,proto3" json:"id,omitempty"`
	unknownFields protoimpl.UnknownFields
	sizeCache     protoimpl.SizeCache
}

func (x *DeleteFirewallRequest) Reset() {
	*x = DeleteFirewallRequest{}
	mi := &file_firewall_proto_msgTypes[15]
	ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
	ms.StoreMessageInfo(mi)
}

func (x *DeleteFirewallRequest) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*DeleteFirewallRequest) ProtoMessage() {}

func (x *DeleteFirewallRequest) ProtoReflect() protoreflect.Message {
	mi := &file_firewall_proto_msgTypes[15]
	if x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use DeleteFirewallRequest.ProtoReflect.Descriptor instead.
func (*DeleteFirewallRequest) Descriptor() ([]byte, []int) {
	return file_firewall_proto_rawDescGZIP(), []int{15}
}

func (x *DeleteFirewallRequest) GetId() string {
	if x != nil {
		return x.Id
	}
	return ""
}

type DeleteFirewallResponse struct {
	state         protoimpl.MessageState `protogen:"open.v1"`
	Success       bool                   `protobuf:"varint,1,opt,name=success,proto3" json:"success,omitempty"`
	Message       string                 `protobuf:"bytes,2,opt,name=message,proto3" json:"message,omitempty"`
	unknownFields protoimpl.UnknownFields
	sizeCache     protoimpl.SizeCache
}

func (x *DeleteFirewallResponse) Reset() {
	*x = DeleteFirewallResponse{}
	mi := &file_firewall_proto_msgTypes[16]
	ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
	ms.StoreMessageInfo(mi)
}

func (x *DeleteFirewallResponse) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*DeleteFirewallResponse) ProtoMessage() {}

func (x *DeleteFirewallResponse) ProtoReflect() protoreflect.Message {
	mi := &file_firewall_proto_msgTypes[16]
	if x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use DeleteFirewallResponse.ProtoReflect.Descriptor instead.
func (*DeleteFirewallResponse) Descriptor() ([]byte, []int) {
	return file_firewall_proto_rawDescGZIP(), []int{16}
}

func (x *DeleteFirewallResponse) GetSuccess() bool {
	if x != nil {
		return x.Success
	}
	return false
}

func (x *DeleteFirewallResponse) GetMessage() string {
	if x != nil {
		return x.Message
	}
	return ""
}

type DeleteFirewallBatchRequest struct {
	state         protoimpl.MessageState `protogen:"open.v1"`
	Ids           []string               `protobuf:"bytes,1,rep,name=ids,proto3" json:"ids,omitempty"`
	unknownFields protoimpl.UnknownFields
	sizeCache     protoimpl.SizeCache
}

func (x *DeleteFirewallBatchRequest) Reset() {
	*x = DeleteFirewallBatchRequest{}
	mi := &file_firewall_proto_msgTypes[17]
	ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
	ms.StoreMessageInfo(mi)
}

func (x *DeleteFirewallBatchRequest) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*DeleteFirewallBatchRequest) ProtoMessage() {}

func (x *DeleteFirewallBatchRequest) ProtoReflect() protoreflect.Message {
	mi := &file_firewall_proto_msgTypes[17]
	if x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use DeleteFirewallBatchRequest.ProtoReflect.Descriptor instead.
func (*DeleteFirewallBatchRequest) Descriptor() ([]byte, []int) {
	return file_firewall_proto_rawDescGZIP(), []int{17}
}

func (x *DeleteFirewallBatchRequest) GetIds() []string {
	if x != nil {
		return x.Ids
	}
	return nil
}

type DeleteFirewallBatchResponse struct {
	state         protoimpl.MessageState `protogen:"open.v1"`
	Success       bool                   `protobuf:"varint,1,opt,name=success,proto3" json:"success,omitempty"`
	Message       string                 `protobuf:"bytes,2,opt,name=message,proto3" json:"message,omitempty"`
	unknownFields protoimpl.UnknownFields
	sizeCache     protoimpl.SizeCache
}

func (x *DeleteFirewallBatchResponse) Reset() {
	*x = DeleteFirewallBatchResponse{}
	mi := &file_firewall_proto_msgTypes[18]
	ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
	ms.StoreMessageInfo(mi)
}

func (x *DeleteFirewallBatchResponse) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*DeleteFirewallBatchResponse) ProtoMessage() {}

func (x *DeleteFirewallBatchResponse) ProtoReflect() protoreflect.Message {
	mi := &file_firewall_proto_msgTypes[18]
	if x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use DeleteFirewallBatchResponse.ProtoReflect.Descriptor instead.
func (*DeleteFirewallBatchResponse) Descriptor() ([]byte, []int) {
	return file_firewall_proto_rawDescGZIP(), []int{18}
}

func (x *DeleteFirewallBatchResponse) GetSuccess() bool {
	if x != nil {
		return x.Success
	}
	return false
}

func (x *DeleteFirewallBatchResponse) GetMessage() string {
	if x != nil {
		return x.Message
	}
	return ""
}

type DeleteAllFirewallsRequest struct {
	state         protoimpl.MessageState `protogen:"open.v1"`
	unknownFields protoimpl.UnknownFields
	sizeCache     protoimpl.SizeCache
}

func (x *DeleteAllFirewallsRequest) Reset() {
	*x = DeleteAllFirewallsRequest{}
	mi := &file_firewall_proto_msgTypes[19]
	ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
	ms.StoreMessageInfo(mi)
}

func (x *DeleteAllFirewallsRequest) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*DeleteAllFirewallsRequest) ProtoMessage() {}

func (x *DeleteAllFirewallsRequest) ProtoReflect() protoreflect.Message {
	mi := &file_firewall_proto_msgTypes[19]
	if x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use DeleteAllFirewallsRequest.ProtoReflect.Descriptor instead.
func (*DeleteAllFirewallsRequest) Descriptor() ([]byte, []int) {
	return file_firewall_proto_rawDescGZIP(), []int{19}
}

type DeleteAllFirewallsResponse struct {
	state         protoimpl.MessageState `protogen:"open.v1"`
	Success       bool                   `protobuf:"varint,1,opt,name=success,proto3" json:"success,omitempty"`
	Message       string                 `protobuf:"bytes,2,opt,name=message,proto3" json:"message,omitempty"`
	unknownFields protoimpl.UnknownFields
	sizeCache     protoimpl.SizeCache
}

func (x *DeleteAllFirewallsResponse) Reset() {
	*x = DeleteAllFirewallsResponse{}
	mi := &file_firewall_proto_msgTypes[20]
	ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
	ms.StoreMessageInfo(mi)
}

func (x *DeleteAllFirewallsResponse) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*DeleteAllFirewallsResponse) ProtoMessage() {}

func (x *DeleteAllFirewallsResponse) ProtoReflect() protoreflect.Message {
	mi := &file_firewall_proto_msgTypes[20]
	if x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use DeleteAllFirewallsResponse.ProtoReflect.Descriptor instead.
func (*DeleteAllFirewallsResponse) Descriptor() ([]byte, []int) {
	return file_firewall_proto_rawDescGZIP(), []int{20}
}

func (x *DeleteAllFirewallsResponse) GetSuccess() bool {
	if x != nil {
		return x.Success
	}
	return false
}

func (x *DeleteAllFirewallsResponse) GetMessage() string {
	if x != nil {
		return x.Message
	}
	return ""
}

type FirewallListItemFlat struct {
	state protoimpl.MessageState `protogen:"open.v1"`
	// Asset fields
	AssetId          string  `protobuf:"bytes,1,opt,name=asset_id,json=assetId,proto3" json:"asset_id,omitempty"`
	VendorCode       string  `protobuf:"bytes,2,opt,name=vendor_code,json=vendorCode,proto3" json:"vendor_code,omitempty"`
	Name             string  `protobuf:"bytes,3,opt,name=name,proto3" json:"name,omitempty"`
	Domain           string  `protobuf:"bytes,4,opt,name=domain,proto3" json:"domain,omitempty"`
	Hostname         string  `protobuf:"bytes,5,opt,name=hostname,proto3" json:"hostname,omitempty"`
	OsName           string  `protobuf:"bytes,6,opt,name=os_name,json=osName,proto3" json:"os_name,omitempty"`
	OsVersion        string  `protobuf:"bytes,7,opt,name=os_version,json=osVersion,proto3" json:"os_version,omitempty"`
	Description      string  `protobuf:"bytes,8,opt,name=description,proto3" json:"description,omitempty"`
	AssetType        string  `protobuf:"bytes,9,opt,name=asset_type,json=assetType,proto3" json:"asset_type,omitempty"`
	DiscoveredBy     string  `protobuf:"bytes,10,opt,name=discovered_by,json=discoveredBy,proto3" json:"discovered_by,omitempty"`
	Risk             int32   `protobuf:"varint,11,opt,name=risk,proto3" json:"risk,omitempty"`
	LoggingCompleted bool    `protobuf:"varint,12,opt,name=logging_completed,json=loggingCompleted,proto3" json:"logging_completed,omitempty"`
	AssetValue       float64 `protobuf:"fixed64,13,opt,name=asset_value,json=assetValue,proto3" json:"asset_value,omitempty"`
	// Details fields
	DetailsId       string `protobuf:"bytes,14,opt,name=details_id,json=detailsId,proto3" json:"details_id,omitempty"`
	Model           string `protobuf:"bytes,15,opt,name=model,proto3" json:"model,omitempty"`
	FirmwareVersion string `protobuf:"bytes,16,opt,name=firmware_version,json=firmwareVersion,proto3" json:"firmware_version,omitempty"`
	SerialNumber    string `protobuf:"bytes,17,opt,name=serial_number,json=serialNumber,proto3" json:"serial_number,omitempty"`
	IsHaEnabled     bool   `protobuf:"varint,18,opt,name=is_ha_enabled,json=isHaEnabled,proto3" json:"is_ha_enabled,omitempty"`
	HaRole          string `protobuf:"bytes,19,opt,name=ha_role,json=haRole,proto3" json:"ha_role,omitempty"`
	ManagementIp    string `protobuf:"bytes,20,opt,name=management_ip,json=managementIp,proto3" json:"management_ip,omitempty"`
	SiteName        string `protobuf:"bytes,21,opt,name=site_name,json=siteName,proto3" json:"site_name,omitempty"`
	Location        string `protobuf:"bytes,22,opt,name=location,proto3" json:"location,omitempty"`
	Status          string `protobuf:"bytes,23,opt,name=status,proto3" json:"status,omitempty"`
	LastSync        string `protobuf:"bytes,24,opt,name=last_sync,json=lastSync,proto3" json:"last_sync,omitempty"`
	SyncStatus      string `protobuf:"bytes,25,opt,name=sync_status,json=syncStatus,proto3" json:"sync_status,omitempty"`
	unknownFields   protoimpl.UnknownFields
	sizeCache       protoimpl.SizeCache
}

func (x *FirewallListItemFlat) Reset() {
	*x = FirewallListItemFlat{}
	mi := &file_firewall_proto_msgTypes[21]
	ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
	ms.StoreMessageInfo(mi)
}

func (x *FirewallListItemFlat) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*FirewallListItemFlat) ProtoMessage() {}

func (x *FirewallListItemFlat) ProtoReflect() protoreflect.Message {
	mi := &file_firewall_proto_msgTypes[21]
	if x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use FirewallListItemFlat.ProtoReflect.Descriptor instead.
func (*FirewallListItemFlat) Descriptor() ([]byte, []int) {
	return file_firewall_proto_rawDescGZIP(), []int{21}
}

func (x *FirewallListItemFlat) GetAssetId() string {
	if x != nil {
		return x.AssetId
	}
	return ""
}

func (x *FirewallListItemFlat) GetVendorCode() string {
	if x != nil {
		return x.VendorCode
	}
	return ""
}

func (x *FirewallListItemFlat) GetName() string {
	if x != nil {
		return x.Name
	}
	return ""
}

func (x *FirewallListItemFlat) GetDomain() string {
	if x != nil {
		return x.Domain
	}
	return ""
}

func (x *FirewallListItemFlat) GetHostname() string {
	if x != nil {
		return x.Hostname
	}
	return ""
}

func (x *FirewallListItemFlat) GetOsName() string {
	if x != nil {
		return x.OsName
	}
	return ""
}

func (x *FirewallListItemFlat) GetOsVersion() string {
	if x != nil {
		return x.OsVersion
	}
	return ""
}

func (x *FirewallListItemFlat) GetDescription() string {
	if x != nil {
		return x.Description
	}
	return ""
}

func (x *FirewallListItemFlat) GetAssetType() string {
	if x != nil {
		return x.AssetType
	}
	return ""
}

func (x *FirewallListItemFlat) GetDiscoveredBy() string {
	if x != nil {
		return x.DiscoveredBy
	}
	return ""
}

func (x *FirewallListItemFlat) GetRisk() int32 {
	if x != nil {
		return x.Risk
	}
	return 0
}

func (x *FirewallListItemFlat) GetLoggingCompleted() bool {
	if x != nil {
		return x.LoggingCompleted
	}
	return false
}

func (x *FirewallListItemFlat) GetAssetValue() float64 {
	if x != nil {
		return x.AssetValue
	}
	return 0
}

func (x *FirewallListItemFlat) GetDetailsId() string {
	if x != nil {
		return x.DetailsId
	}
	return ""
}

func (x *FirewallListItemFlat) GetModel() string {
	if x != nil {
		return x.Model
	}
	return ""
}

func (x *FirewallListItemFlat) GetFirmwareVersion() string {
	if x != nil {
		return x.FirmwareVersion
	}
	return ""
}

func (x *FirewallListItemFlat) GetSerialNumber() string {
	if x != nil {
		return x.SerialNumber
	}
	return ""
}

func (x *FirewallListItemFlat) GetIsHaEnabled() bool {
	if x != nil {
		return x.IsHaEnabled
	}
	return false
}

func (x *FirewallListItemFlat) GetHaRole() string {
	if x != nil {
		return x.HaRole
	}
	return ""
}

func (x *FirewallListItemFlat) GetManagementIp() string {
	if x != nil {
		return x.ManagementIp
	}
	return ""
}

func (x *FirewallListItemFlat) GetSiteName() string {
	if x != nil {
		return x.SiteName
	}
	return ""
}

func (x *FirewallListItemFlat) GetLocation() string {
	if x != nil {
		return x.Location
	}
	return ""
}

func (x *FirewallListItemFlat) GetStatus() string {
	if x != nil {
		return x.Status
	}
	return ""
}

func (x *FirewallListItemFlat) GetLastSync() string {
	if x != nil {
		return x.LastSync
	}
	return ""
}

func (x *FirewallListItemFlat) GetSyncStatus() string {
	if x != nil {
		return x.SyncStatus
	}
	return ""
}

type ListFirewallsRequest struct {
	state         protoimpl.MessageState `protogen:"open.v1"`
	Limit         int32                  `protobuf:"varint,1,opt,name=limit,proto3" json:"limit,omitempty"`
	Page          int32                  `protobuf:"varint,2,opt,name=page,proto3" json:"page,omitempty"`
	unknownFields protoimpl.UnknownFields
	sizeCache     protoimpl.SizeCache
}

func (x *ListFirewallsRequest) Reset() {
	*x = ListFirewallsRequest{}
	mi := &file_firewall_proto_msgTypes[22]
	ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
	ms.StoreMessageInfo(mi)
}

func (x *ListFirewallsRequest) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*ListFirewallsRequest) ProtoMessage() {}

func (x *ListFirewallsRequest) ProtoReflect() protoreflect.Message {
	mi := &file_firewall_proto_msgTypes[22]
	if x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use ListFirewallsRequest.ProtoReflect.Descriptor instead.
func (*ListFirewallsRequest) Descriptor() ([]byte, []int) {
	return file_firewall_proto_rawDescGZIP(), []int{22}
}

func (x *ListFirewallsRequest) GetLimit() int32 {
	if x != nil {
		return x.Limit
	}
	return 0
}

func (x *ListFirewallsRequest) GetPage() int32 {
	if x != nil {
		return x.Page
	}
	return 0
}

type ListFirewallsResponse struct {
	state         protoimpl.MessageState  `protogen:"open.v1"`
	Contents      []*FirewallListItemFlat `protobuf:"bytes,1,rep,name=contents,proto3" json:"contents,omitempty"`
	Count         int32                   `protobuf:"varint,2,opt,name=count,proto3" json:"count,omitempty"`
	unknownFields protoimpl.UnknownFields
	sizeCache     protoimpl.SizeCache
}

func (x *ListFirewallsResponse) Reset() {
	*x = ListFirewallsResponse{}
	mi := &file_firewall_proto_msgTypes[23]
	ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
	ms.StoreMessageInfo(mi)
}

func (x *ListFirewallsResponse) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*ListFirewallsResponse) ProtoMessage() {}

func (x *ListFirewallsResponse) ProtoReflect() protoreflect.Message {
	mi := &file_firewall_proto_msgTypes[23]
	if x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use ListFirewallsResponse.ProtoReflect.Descriptor instead.
func (*ListFirewallsResponse) Descriptor() ([]byte, []int) {
	return file_firewall_proto_rawDescGZIP(), []int{23}
}

func (x *ListFirewallsResponse) GetContents() []*FirewallListItemFlat {
	if x != nil {
		return x.Contents
	}
	return nil
}

func (x *ListFirewallsResponse) GetCount() int32 {
	if x != nil {
		return x.Count
	}
	return 0
}

var File_firewall_proto protoreflect.FileDescriptor

var file_firewall_proto_rawDesc = string([]byte{
	0x0a, 0x0e, 0x66, 0x69, 0x72, 0x65, 0x77, 0x61, 0x6c, 0x6c, 0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f,
	0x22, 0x70, 0x0a, 0x0b, 0x53, 0x65, 0x63, 0x6f, 0x6e, 0x64, 0x61, 0x72, 0x79, 0x49, 0x50, 0x12,
	0x0e, 0x0a, 0x02, 0x69, 0x64, 0x18, 0x01, 0x20, 0x01, 0x28, 0x05, 0x52, 0x02, 0x69, 0x64, 0x12,
	0x0e, 0x0a, 0x02, 0x69, 0x70, 0x18, 0x02, 0x20, 0x01, 0x28, 0x09, 0x52, 0x02, 0x69, 0x70, 0x12,
	0x1f, 0x0a, 0x0b, 0x63, 0x69, 0x64, 0x72, 0x5f, 0x70, 0x72, 0x65, 0x66, 0x69, 0x78, 0x18, 0x03,
	0x20, 0x01, 0x28, 0x05, 0x52, 0x0a, 0x63, 0x69, 0x64, 0x72, 0x50, 0x72, 0x65, 0x66, 0x69, 0x78,
	0x12, 0x20, 0x0a, 0x0b, 0x61, 0x6c, 0x6c, 0x6f, 0x77, 0x61, 0x63, 0x63, 0x65, 0x73, 0x73, 0x18,
	0x04, 0x20, 0x03, 0x28, 0x09, 0x52, 0x0b, 0x61, 0x6c, 0x6c, 0x6f, 0x77, 0x61, 0x63, 0x63, 0x65,
	0x73, 0x73, 0x22, 0x54, 0x0a, 0x0e, 0x5a, 0x6f, 0x6e, 0x65, 0x49, 0x6e, 0x74, 0x65, 0x72, 0x66,
	0x61, 0x63, 0x65, 0x73, 0x12, 0x25, 0x0a, 0x0e, 0x69, 0x6e, 0x74, 0x65, 0x72, 0x66, 0x61, 0x63,
	0x65, 0x5f, 0x6e, 0x61, 0x6d, 0x65, 0x18, 0x01, 0x20, 0x03, 0x28, 0x09, 0x52, 0x0d, 0x69, 0x6e,
	0x74, 0x65, 0x72, 0x66, 0x61, 0x63, 0x65, 0x4e, 0x61, 0x6d, 0x65, 0x12, 0x1b, 0x0a, 0x09, 0x76,
	0x6c, 0x61, 0x6e, 0x5f, 0x6e, 0x61, 0x6d, 0x65, 0x18, 0x02, 0x20, 0x03, 0x28, 0x09, 0x52, 0x08,
	0x76, 0x6c, 0x61, 0x6e, 0x4e, 0x61, 0x6d, 0x65, 0x22, 0x88, 0x03, 0x0a, 0x0d, 0x46, 0x69, 0x72,
	0x65, 0x77, 0x61, 0x6c, 0x6c, 0x41, 0x73, 0x73, 0x65, 0x74, 0x12, 0x0e, 0x0a, 0x02, 0x69, 0x64,
	0x18, 0x01, 0x20, 0x01, 0x28, 0x09, 0x52, 0x02, 0x69, 0x64, 0x12, 0x1f, 0x0a, 0x0b, 0x76, 0x65,
	0x6e, 0x64, 0x6f, 0x72, 0x5f, 0x63, 0x6f, 0x64, 0x65, 0x18, 0x02, 0x20, 0x01, 0x28, 0x09, 0x52,
	0x0a, 0x76, 0x65, 0x6e, 0x64, 0x6f, 0x72, 0x43, 0x6f, 0x64, 0x65, 0x12, 0x12, 0x0a, 0x04, 0x6e,
	0x61, 0x6d, 0x65, 0x18, 0x03, 0x20, 0x01, 0x28, 0x09, 0x52, 0x04, 0x6e, 0x61, 0x6d, 0x65, 0x12,
	0x16, 0x0a, 0x06, 0x64, 0x6f, 0x6d, 0x61, 0x69, 0x6e, 0x18, 0x04, 0x20, 0x01, 0x28, 0x09, 0x52,
	0x06, 0x64, 0x6f, 0x6d, 0x61, 0x69, 0x6e, 0x12, 0x1a, 0x0a, 0x08, 0x68, 0x6f, 0x73, 0x74, 0x6e,
	0x61, 0x6d, 0x65, 0x18, 0x05, 0x20, 0x01, 0x28, 0x09, 0x52, 0x08, 0x68, 0x6f, 0x73, 0x74, 0x6e,
	0x61, 0x6d, 0x65, 0x12, 0x17, 0x0a, 0x07, 0x6f, 0x73, 0x5f, 0x6e, 0x61, 0x6d, 0x65, 0x18, 0x06,
	0x20, 0x01, 0x28, 0x09, 0x52, 0x06, 0x6f, 0x73, 0x4e, 0x61, 0x6d, 0x65, 0x12, 0x1d, 0x0a, 0x0a,
	0x6f, 0x73, 0x5f, 0x76, 0x65, 0x72, 0x73, 0x69, 0x6f, 0x6e, 0x18, 0x07, 0x20, 0x01, 0x28, 0x09,
	0x52, 0x09, 0x6f, 0x73, 0x56, 0x65, 0x72, 0x73, 0x69, 0x6f, 0x6e, 0x12, 0x20, 0x0a, 0x0b, 0x64,
	0x65, 0x73, 0x63, 0x72, 0x69, 0x70, 0x74, 0x69, 0x6f, 0x6e, 0x18, 0x08, 0x20, 0x01, 0x28, 0x09,
	0x52, 0x0b, 0x64, 0x65, 0x73, 0x63, 0x72, 0x69, 0x70, 0x74, 0x69, 0x6f, 0x6e, 0x12, 0x1d, 0x0a,
	0x0a, 0x61, 0x73, 0x73, 0x65, 0x74, 0x5f, 0x74, 0x79, 0x70, 0x65, 0x18, 0x09, 0x20, 0x01, 0x28,
	0x09, 0x52, 0x09, 0x61, 0x73, 0x73, 0x65, 0x74, 0x54, 0x79, 0x70, 0x65, 0x12, 0x23, 0x0a, 0x0d,
	0x64, 0x69, 0x73, 0x63, 0x6f, 0x76, 0x65, 0x72, 0x65, 0x64, 0x5f, 0x62, 0x79, 0x18, 0x0a, 0x20,
	0x01, 0x28, 0x09, 0x52, 0x0c, 0x64, 0x69, 0x73, 0x63, 0x6f, 0x76, 0x65, 0x72, 0x65, 0x64, 0x42,
	0x79, 0x12, 0x12, 0x0a, 0x04, 0x72, 0x69, 0x73, 0x6b, 0x18, 0x0b, 0x20, 0x01, 0x28, 0x05, 0x52,
	0x04, 0x72, 0x69, 0x73, 0x6b, 0x12, 0x2b, 0x0a, 0x11, 0x6c, 0x6f, 0x67, 0x67, 0x69, 0x6e, 0x67,
	0x5f, 0x63, 0x6f, 0x6d, 0x70, 0x6c, 0x65, 0x74, 0x65, 0x64, 0x18, 0x0c, 0x20, 0x01, 0x28, 0x08,
	0x52, 0x10, 0x6c, 0x6f, 0x67, 0x67, 0x69, 0x6e, 0x67, 0x43, 0x6f, 0x6d, 0x70, 0x6c, 0x65, 0x74,
	0x65, 0x64, 0x12, 0x1f, 0x0a, 0x0b, 0x61, 0x73, 0x73, 0x65, 0x74, 0x5f, 0x76, 0x61, 0x6c, 0x75,
	0x65, 0x18, 0x0d, 0x20, 0x01, 0x28, 0x01, 0x52, 0x0a, 0x61, 0x73, 0x73, 0x65, 0x74, 0x56, 0x61,
	0x6c, 0x75, 0x65, 0x22, 0x93, 0x03, 0x0a, 0x0f, 0x46, 0x69, 0x72, 0x65, 0x77, 0x61, 0x6c, 0x6c,
	0x44, 0x65, 0x74, 0x61, 0x69, 0x6c, 0x73, 0x12, 0x0e, 0x0a, 0x02, 0x69, 0x64, 0x18, 0x01, 0x20,
	0x01, 0x28, 0x09, 0x52, 0x02, 0x69, 0x64, 0x12, 0x19, 0x0a, 0x08, 0x61, 0x73, 0x73, 0x65, 0x74,
	0x5f, 0x69, 0x64, 0x18, 0x02, 0x20, 0x01, 0x28, 0x09, 0x52, 0x07, 0x61, 0x73, 0x73, 0x65, 0x74,
	0x49, 0x64, 0x12, 0x14, 0x0a, 0x05, 0x6d, 0x6f, 0x64, 0x65, 0x6c, 0x18, 0x03, 0x20, 0x01, 0x28,
	0x09, 0x52, 0x05, 0x6d, 0x6f, 0x64, 0x65, 0x6c, 0x12, 0x29, 0x0a, 0x10, 0x66, 0x69, 0x72, 0x6d,
	0x77, 0x61, 0x72, 0x65, 0x5f, 0x76, 0x65, 0x72, 0x73, 0x69, 0x6f, 0x6e, 0x18, 0x04, 0x20, 0x01,
	0x28, 0x09, 0x52, 0x0f, 0x66, 0x69, 0x72, 0x6d, 0x77, 0x61, 0x72, 0x65, 0x56, 0x65, 0x72, 0x73,
	0x69, 0x6f, 0x6e, 0x12, 0x23, 0x0a, 0x0d, 0x73, 0x65, 0x72, 0x69, 0x61, 0x6c, 0x5f, 0x6e, 0x75,
	0x6d, 0x62, 0x65, 0x72, 0x18, 0x05, 0x20, 0x01, 0x28, 0x09, 0x52, 0x0c, 0x73, 0x65, 0x72, 0x69,
	0x61, 0x6c, 0x4e, 0x75, 0x6d, 0x62, 0x65, 0x72, 0x12, 0x22, 0x0a, 0x0d, 0x69, 0x73, 0x5f, 0x68,
	0x61, 0x5f, 0x65, 0x6e, 0x61, 0x62, 0x6c, 0x65, 0x64, 0x18, 0x06, 0x20, 0x01, 0x28, 0x08, 0x52,
	0x0b, 0x69, 0x73, 0x48, 0x61, 0x45, 0x6e, 0x61, 0x62, 0x6c, 0x65, 0x64, 0x12, 0x17, 0x0a, 0x07,
	0x68, 0x61, 0x5f, 0x72, 0x6f, 0x6c, 0x65, 0x18, 0x07, 0x20, 0x01, 0x28, 0x09, 0x52, 0x06, 0x68,
	0x61, 0x52, 0x6f, 0x6c, 0x65, 0x12, 0x23, 0x0a, 0x0d, 0x6d, 0x61, 0x6e, 0x61, 0x67, 0x65, 0x6d,
	0x65, 0x6e, 0x74, 0x5f, 0x69, 0x70, 0x18, 0x08, 0x20, 0x01, 0x28, 0x09, 0x52, 0x0c, 0x6d, 0x61,
	0x6e, 0x61, 0x67, 0x65, 0x6d, 0x65, 0x6e, 0x74, 0x49, 0x70, 0x12, 0x1b, 0x0a, 0x09, 0x73, 0x69,
	0x74, 0x65, 0x5f, 0x6e, 0x61, 0x6d, 0x65, 0x18, 0x09, 0x20, 0x01, 0x28, 0x09, 0x52, 0x08, 0x73,
	0x69, 0x74, 0x65, 0x4e, 0x61, 0x6d, 0x65, 0x12, 0x1a, 0x0a, 0x08, 0x6c, 0x6f, 0x63, 0x61, 0x74,
	0x69, 0x6f, 0x6e, 0x18, 0x0a, 0x20, 0x01, 0x28, 0x09, 0x52, 0x08, 0x6c, 0x6f, 0x63, 0x61, 0x74,
	0x69, 0x6f, 0x6e, 0x12, 0x16, 0x0a, 0x06, 0x73, 0x74, 0x61, 0x74, 0x75, 0x73, 0x18, 0x0b, 0x20,
	0x01, 0x28, 0x09, 0x52, 0x06, 0x73, 0x74, 0x61, 0x74, 0x75, 0x73, 0x12, 0x1b, 0x0a, 0x09, 0x6c,
	0x61, 0x73, 0x74, 0x5f, 0x73, 0x79, 0x6e, 0x63, 0x18, 0x0c, 0x20, 0x01, 0x28, 0x09, 0x52, 0x08,
	0x6c, 0x61, 0x73, 0x74, 0x53, 0x79, 0x6e, 0x63, 0x12, 0x1f, 0x0a, 0x0b, 0x73, 0x79, 0x6e, 0x63,
	0x5f, 0x73, 0x74, 0x61, 0x74, 0x75, 0x73, 0x18, 0x0d, 0x20, 0x01, 0x28, 0x09, 0x52, 0x0a, 0x73,
	0x79, 0x6e, 0x63, 0x53, 0x74, 0x61, 0x74, 0x75, 0x73, 0x22, 0xf6, 0x02, 0x0a, 0x0c, 0x46, 0x69,
	0x72, 0x65, 0x77, 0x61, 0x6c, 0x6c, 0x5a, 0x6f, 0x6e, 0x65, 0x12, 0x0e, 0x0a, 0x02, 0x69, 0x64,
	0x18, 0x01, 0x20, 0x01, 0x28, 0x09, 0x52, 0x02, 0x69, 0x64, 0x12, 0x1b, 0x0a, 0x09, 0x7a, 0x6f,
	0x6e, 0x65, 0x5f, 0x6e, 0x61, 0x6d, 0x65, 0x18, 0x02, 0x20, 0x01, 0x28, 0x09, 0x52, 0x08, 0x7a,
	0x6f, 0x6e, 0x65, 0x4e, 0x61, 0x6d, 0x65, 0x12, 0x1b, 0x0a, 0x09, 0x7a, 0x6f, 0x6e, 0x65, 0x5f,
	0x74, 0x79, 0x70, 0x65, 0x18, 0x03, 0x20, 0x01, 0x28, 0x09, 0x52, 0x08, 0x7a, 0x6f, 0x6e, 0x65,
	0x54, 0x79, 0x70, 0x65, 0x12, 0x28, 0x0a, 0x10, 0x76, 0x65, 0x6e, 0x64, 0x6f, 0x72, 0x5f, 0x7a,
	0x6f, 0x6e, 0x65, 0x5f, 0x74, 0x79, 0x70, 0x65, 0x18, 0x04, 0x20, 0x01, 0x28, 0x09, 0x52, 0x0e,
	0x76, 0x65, 0x6e, 0x64, 0x6f, 0x72, 0x5a, 0x6f, 0x6e, 0x65, 0x54, 0x79, 0x70, 0x65, 0x12, 0x20,
	0x0a, 0x0b, 0x64, 0x65, 0x73, 0x63, 0x72, 0x69, 0x70, 0x74, 0x69, 0x6f, 0x6e, 0x18, 0x05, 0x20,
	0x01, 0x28, 0x09, 0x52, 0x0b, 0x64, 0x65, 0x73, 0x63, 0x72, 0x69, 0x70, 0x74, 0x69, 0x6f, 0x6e,
	0x12, 0x1b, 0x0a, 0x09, 0x7a, 0x6f, 0x6e, 0x65, 0x5f, 0x6d, 0x6f, 0x64, 0x65, 0x18, 0x06, 0x20,
	0x01, 0x28, 0x09, 0x52, 0x08, 0x7a, 0x6f, 0x6e, 0x65, 0x4d, 0x6f, 0x64, 0x65, 0x12, 0x29, 0x0a,
	0x10, 0x69, 0x6e, 0x74, 0x72, 0x61, 0x7a, 0x6f, 0x6e, 0x65, 0x5f, 0x61, 0x63, 0x74, 0x69, 0x6f,
	0x6e, 0x18, 0x07, 0x20, 0x01, 0x28, 0x09, 0x52, 0x0f, 0x69, 0x6e, 0x74, 0x72, 0x61, 0x7a, 0x6f,
	0x6e, 0x65, 0x41, 0x63, 0x74, 0x69, 0x6f, 0x6e, 0x12, 0x36, 0x0a, 0x17, 0x7a, 0x6f, 0x6e, 0x65,
	0x5f, 0x70, 0x72, 0x6f, 0x74, 0x65, 0x63, 0x74, 0x69, 0x6f, 0x6e, 0x5f, 0x70, 0x72, 0x6f, 0x66,
	0x69, 0x6c, 0x65, 0x18, 0x08, 0x20, 0x01, 0x28, 0x09, 0x52, 0x15, 0x7a, 0x6f, 0x6e, 0x65, 0x50,
	0x72, 0x6f, 0x74, 0x65, 0x63, 0x74, 0x69, 0x6f, 0x6e, 0x50, 0x72, 0x6f, 0x66, 0x69, 0x6c, 0x65,
	0x12, 0x1f, 0x0a, 0x0b, 0x6c, 0x6f, 0x67, 0x5f, 0x73, 0x65, 0x74, 0x74, 0x69, 0x6e, 0x67, 0x18,
	0x09, 0x20, 0x01, 0x28, 0x09, 0x52, 0x0a, 0x6c, 0x6f, 0x67, 0x53, 0x65, 0x74, 0x74, 0x69, 0x6e,
	0x67, 0x12, 0x2f, 0x0a, 0x0a, 0x69, 0x6e, 0x74, 0x65, 0x72, 0x66, 0x61, 0x63, 0x65, 0x73, 0x18,
	0x0a, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x0f, 0x2e, 0x5a, 0x6f, 0x6e, 0x65, 0x49, 0x6e, 0x74, 0x65,
	0x72, 0x66, 0x61, 0x63, 0x65, 0x73, 0x52, 0x0a, 0x69, 0x6e, 0x74, 0x65, 0x72, 0x66, 0x61, 0x63,
	0x65, 0x73, 0x22, 0xca, 0x04, 0x0a, 0x11, 0x46, 0x69, 0x72, 0x65, 0x77, 0x61, 0x6c, 0x6c, 0x49,
	0x6e, 0x74, 0x65, 0x72, 0x66, 0x61, 0x63, 0x65, 0x12, 0x0e, 0x0a, 0x02, 0x69, 0x64, 0x18, 0x01,
	0x20, 0x01, 0x28, 0x09, 0x52, 0x02, 0x69, 0x64, 0x12, 0x25, 0x0a, 0x0e, 0x69, 0x6e, 0x74, 0x65,
	0x72, 0x66, 0x61, 0x63, 0x65, 0x5f, 0x6e, 0x61, 0x6d, 0x65, 0x18, 0x02, 0x20, 0x01, 0x28, 0x09,
	0x52, 0x0d, 0x69, 0x6e, 0x74, 0x65, 0x72, 0x66, 0x61, 0x63, 0x65, 0x4e, 0x61, 0x6d, 0x65, 0x12,
	0x25, 0x0a, 0x0e, 0x69, 0x6e, 0x74, 0x65, 0x72, 0x66, 0x61, 0x63, 0x65, 0x5f, 0x74, 0x79, 0x70,
	0x65, 0x18, 0x03, 0x20, 0x01, 0x28, 0x09, 0x52, 0x0d, 0x69, 0x6e, 0x74, 0x65, 0x72, 0x66, 0x61,
	0x63, 0x65, 0x54, 0x79, 0x70, 0x65, 0x12, 0x25, 0x0a, 0x0e, 0x76, 0x69, 0x72, 0x74, 0x75, 0x61,
	0x6c, 0x5f, 0x72, 0x6f, 0x75, 0x74, 0x65, 0x72, 0x18, 0x04, 0x20, 0x01, 0x28, 0x09, 0x52, 0x0d,
	0x76, 0x69, 0x72, 0x74, 0x75, 0x61, 0x6c, 0x52, 0x6f, 0x75, 0x74, 0x65, 0x72, 0x12, 0x25, 0x0a,
	0x0e, 0x76, 0x69, 0x72, 0x74, 0x75, 0x61, 0x6c, 0x5f, 0x73, 0x79, 0x73, 0x74, 0x65, 0x6d, 0x18,
	0x05, 0x20, 0x01, 0x28, 0x09, 0x52, 0x0d, 0x76, 0x69, 0x72, 0x74, 0x75, 0x61, 0x6c, 0x53, 0x79,
	0x73, 0x74, 0x65, 0x6d, 0x12, 0x20, 0x0a, 0x0b, 0x64, 0x65, 0x73, 0x63, 0x72, 0x69, 0x70, 0x74,
	0x69, 0x6f, 0x6e, 0x18, 0x06, 0x20, 0x01, 0x28, 0x09, 0x52, 0x0b, 0x64, 0x65, 0x73, 0x63, 0x72,
	0x69, 0x70, 0x74, 0x69, 0x6f, 0x6e, 0x12, 0x2d, 0x0a, 0x12, 0x6f, 0x70, 0x65, 0x72, 0x61, 0x74,
	0x69, 0x6f, 0x6e, 0x61, 0x6c, 0x5f, 0x73, 0x74, 0x61, 0x74, 0x75, 0x73, 0x18, 0x07, 0x20, 0x01,
	0x28, 0x09, 0x52, 0x11, 0x6f, 0x70, 0x65, 0x72, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0x61, 0x6c, 0x53,
	0x74, 0x61, 0x74, 0x75, 0x73, 0x12, 0x21, 0x0a, 0x0c, 0x61, 0x64, 0x6d, 0x69, 0x6e, 0x5f, 0x73,
	0x74, 0x61, 0x74, 0x75, 0x73, 0x18, 0x08, 0x20, 0x01, 0x28, 0x09, 0x52, 0x0b, 0x61, 0x64, 0x6d,
	0x69, 0x6e, 0x53, 0x74, 0x61, 0x74, 0x75, 0x73, 0x12, 0x32, 0x0a, 0x15, 0x70, 0x61, 0x72, 0x65,
	0x6e, 0x74, 0x5f, 0x69, 0x6e, 0x74, 0x65, 0x72, 0x66, 0x61, 0x63, 0x65, 0x5f, 0x6e, 0x61, 0x6d,
	0x65, 0x18, 0x09, 0x20, 0x01, 0x28, 0x09, 0x52, 0x13, 0x70, 0x61, 0x72, 0x65, 0x6e, 0x74, 0x49,
	0x6e, 0x74, 0x65, 0x72, 0x66, 0x61, 0x63, 0x65, 0x4e, 0x61, 0x6d, 0x65, 0x12, 0x17, 0x0a, 0x07,
	0x76, 0x6c, 0x61, 0x6e, 0x5f, 0x69, 0x64, 0x18, 0x0a, 0x20, 0x01, 0x28, 0x05, 0x52, 0x06, 0x76,
	0x6c, 0x61, 0x6e, 0x49, 0x64, 0x12, 0x1f, 0x0a, 0x0b, 0x6d, 0x61, 0x63, 0x5f, 0x61, 0x64, 0x64,
	0x72, 0x65, 0x73, 0x73, 0x18, 0x0b, 0x20, 0x01, 0x28, 0x09, 0x52, 0x0a, 0x6d, 0x61, 0x63, 0x41,
	0x64, 0x64, 0x72, 0x65, 0x73, 0x73, 0x12, 0x34, 0x0a, 0x16, 0x76, 0x65, 0x6e, 0x64, 0x6f, 0x72,
	0x5f, 0x73, 0x70, 0x65, 0x63, 0x69, 0x66, 0x69, 0x63, 0x5f, 0x63, 0x6f, 0x6e, 0x66, 0x69, 0x67,
	0x18, 0x0c, 0x20, 0x01, 0x28, 0x09, 0x52, 0x14, 0x76, 0x65, 0x6e, 0x64, 0x6f, 0x72, 0x53, 0x70,
	0x65, 0x63, 0x69, 0x66, 0x69, 0x63, 0x43, 0x6f, 0x6e, 0x66, 0x69, 0x67, 0x12, 0x31, 0x0a, 0x0d,
	0x73, 0x65, 0x63, 0x6f, 0x6e, 0x64, 0x61, 0x72, 0x79, 0x5f, 0x69, 0x70, 0x73, 0x18, 0x0d, 0x20,
	0x03, 0x28, 0x0b, 0x32, 0x0c, 0x2e, 0x53, 0x65, 0x63, 0x6f, 0x6e, 0x64, 0x61, 0x72, 0x79, 0x49,
	0x50, 0x52, 0x0c, 0x73, 0x65, 0x63, 0x6f, 0x6e, 0x64, 0x61, 0x72, 0x79, 0x49, 0x70, 0x73, 0x12,
	0x1d, 0x0a, 0x0a, 0x70, 0x72, 0x69, 0x6d, 0x61, 0x72, 0x79, 0x5f, 0x69, 0x70, 0x18, 0x0e, 0x20,
	0x01, 0x28, 0x09, 0x52, 0x09, 0x70, 0x72, 0x69, 0x6d, 0x61, 0x72, 0x79, 0x49, 0x70, 0x12, 0x1f,
	0x0a, 0x0b, 0x63, 0x69, 0x64, 0x72, 0x5f, 0x70, 0x72, 0x65, 0x66, 0x69, 0x78, 0x18, 0x0f, 0x20,
	0x01, 0x28, 0x05, 0x52, 0x0a, 0x63, 0x69, 0x64, 0x72, 0x50, 0x72, 0x65, 0x66, 0x69, 0x78, 0x22,
	0xf1, 0x01, 0x0a, 0x0c, 0x46, 0x69, 0x72, 0x65, 0x77, 0x61, 0x6c, 0x6c, 0x56, 0x4c, 0x41, 0x4e,
	0x12, 0x0e, 0x0a, 0x02, 0x69, 0x64, 0x18, 0x01, 0x20, 0x01, 0x28, 0x09, 0x52, 0x02, 0x69, 0x64,
	0x12, 0x1f, 0x0a, 0x0b, 0x76, 0x6c, 0x61, 0x6e, 0x5f, 0x6e, 0x75, 0x6d, 0x62, 0x65, 0x72, 0x18,
	0x02, 0x20, 0x01, 0x28, 0x05, 0x52, 0x0a, 0x76, 0x6c, 0x61, 0x6e, 0x4e, 0x75, 0x6d, 0x62, 0x65,
	0x72, 0x12, 0x1b, 0x0a, 0x09, 0x76, 0x6c, 0x61, 0x6e, 0x5f, 0x6e, 0x61, 0x6d, 0x65, 0x18, 0x03,
	0x20, 0x01, 0x28, 0x09, 0x52, 0x08, 0x76, 0x6c, 0x61, 0x6e, 0x4e, 0x61, 0x6d, 0x65, 0x12, 0x20,
	0x0a, 0x0b, 0x64, 0x65, 0x73, 0x63, 0x72, 0x69, 0x70, 0x74, 0x69, 0x6f, 0x6e, 0x18, 0x04, 0x20,
	0x01, 0x28, 0x09, 0x52, 0x0b, 0x64, 0x65, 0x73, 0x63, 0x72, 0x69, 0x70, 0x74, 0x69, 0x6f, 0x6e,
	0x12, 0x1b, 0x0a, 0x09, 0x69, 0x73, 0x5f, 0x6e, 0x61, 0x74, 0x69, 0x76, 0x65, 0x18, 0x05, 0x20,
	0x01, 0x28, 0x08, 0x52, 0x08, 0x69, 0x73, 0x4e, 0x61, 0x74, 0x69, 0x76, 0x65, 0x12, 0x34, 0x0a,
	0x16, 0x76, 0x65, 0x6e, 0x64, 0x6f, 0x72, 0x5f, 0x73, 0x70, 0x65, 0x63, 0x69, 0x66, 0x69, 0x63,
	0x5f, 0x63, 0x6f, 0x6e, 0x66, 0x69, 0x67, 0x18, 0x06, 0x20, 0x01, 0x28, 0x09, 0x52, 0x14, 0x76,
	0x65, 0x6e, 0x64, 0x6f, 0x72, 0x53, 0x70, 0x65, 0x63, 0x69, 0x66, 0x69, 0x63, 0x43, 0x6f, 0x6e,
	0x66, 0x69, 0x67, 0x12, 0x1e, 0x0a, 0x0a, 0x69, 0x6e, 0x74, 0x65, 0x72, 0x66, 0x61, 0x63, 0x65,
	0x73, 0x18, 0x07, 0x20, 0x03, 0x28, 0x09, 0x52, 0x0a, 0x69, 0x6e, 0x74, 0x65, 0x72, 0x66, 0x61,
	0x63, 0x65, 0x73, 0x22, 0x86, 0x03, 0x0a, 0x0e, 0x46, 0x69, 0x72, 0x65, 0x77, 0x61, 0x6c, 0x6c,
	0x50, 0x6f, 0x6c, 0x69, 0x63, 0x79, 0x12, 0x0e, 0x0a, 0x02, 0x69, 0x64, 0x18, 0x01, 0x20, 0x01,
	0x28, 0x09, 0x52, 0x02, 0x69, 0x64, 0x12, 0x1f, 0x0a, 0x0b, 0x70, 0x6f, 0x6c, 0x69, 0x63, 0x79,
	0x5f, 0x6e, 0x61, 0x6d, 0x65, 0x18, 0x02, 0x20, 0x01, 0x28, 0x09, 0x52, 0x0a, 0x70, 0x6f, 0x6c,
	0x69, 0x63, 0x79, 0x4e, 0x61, 0x6d, 0x65, 0x12, 0x1b, 0x0a, 0x09, 0x70, 0x6f, 0x6c, 0x69, 0x63,
	0x79, 0x5f, 0x69, 0x64, 0x18, 0x03, 0x20, 0x01, 0x28, 0x05, 0x52, 0x08, 0x70, 0x6f, 0x6c, 0x69,
	0x63, 0x79, 0x49, 0x64, 0x12, 0x23, 0x0a, 0x0d, 0x73, 0x72, 0x63, 0x5f, 0x61, 0x64, 0x64, 0x72,
	0x65, 0x73, 0x73, 0x65, 0x73, 0x18, 0x04, 0x20, 0x03, 0x28, 0x09, 0x52, 0x0c, 0x73, 0x72, 0x63,
	0x41, 0x64, 0x64, 0x72, 0x65, 0x73, 0x73, 0x65, 0x73, 0x12, 0x23, 0x0a, 0x0d, 0x64, 0x73, 0x74,
	0x5f, 0x61, 0x64, 0x64, 0x72, 0x65, 0x73, 0x73, 0x65, 0x73, 0x18, 0x05, 0x20, 0x03, 0x28, 0x09,
	0x52, 0x0c, 0x64, 0x73, 0x74, 0x41, 0x64, 0x64, 0x72, 0x65, 0x73, 0x73, 0x65, 0x73, 0x12, 0x1a,
	0x0a, 0x08, 0x73, 0x65, 0x72, 0x76, 0x69, 0x63, 0x65, 0x73, 0x18, 0x06, 0x20, 0x03, 0x28, 0x09,
	0x52, 0x08, 0x73, 0x65, 0x72, 0x76, 0x69, 0x63, 0x65, 0x73, 0x12, 0x16, 0x0a, 0x06, 0x61, 0x63,
	0x74, 0x69, 0x6f, 0x6e, 0x18, 0x07, 0x20, 0x01, 0x28, 0x09, 0x52, 0x06, 0x61, 0x63, 0x74, 0x69,
	0x6f, 0x6e, 0x12, 0x1f, 0x0a, 0x0b, 0x70, 0x6f, 0x6c, 0x69, 0x63, 0x79, 0x5f, 0x74, 0x79, 0x70,
	0x65, 0x18, 0x08, 0x20, 0x01, 0x28, 0x09, 0x52, 0x0a, 0x70, 0x6f, 0x6c, 0x69, 0x63, 0x79, 0x54,
	0x79, 0x70, 0x65, 0x12, 0x16, 0x0a, 0x06, 0x73, 0x74, 0x61, 0x74, 0x75, 0x73, 0x18, 0x09, 0x20,
	0x01, 0x28, 0x09, 0x52, 0x06, 0x73, 0x74, 0x61, 0x74, 0x75, 0x73, 0x12, 0x1d, 0x0a, 0x0a, 0x72,
	0x75, 0x6c, 0x65, 0x5f, 0x6f, 0x72, 0x64, 0x65, 0x72, 0x18, 0x0a, 0x20, 0x01, 0x28, 0x05, 0x52,
	0x09, 0x72, 0x75, 0x6c, 0x65, 0x4f, 0x72, 0x64, 0x65, 0x72, 0x12, 0x34, 0x0a, 0x16, 0x76, 0x65,
	0x6e, 0x64, 0x6f, 0x72, 0x5f, 0x73, 0x70, 0x65, 0x63, 0x69, 0x66, 0x69, 0x63, 0x5f, 0x63, 0x6f,
	0x6e, 0x66, 0x69, 0x67, 0x18, 0x0b, 0x20, 0x01, 0x28, 0x09, 0x52, 0x14, 0x76, 0x65, 0x6e, 0x64,
	0x6f, 0x72, 0x53, 0x70, 0x65, 0x63, 0x69, 0x66, 0x69, 0x63, 0x43, 0x6f, 0x6e, 0x66, 0x69, 0x67,
	0x12, 0x1a, 0x0a, 0x08, 0x73, 0x63, 0x68, 0x65, 0x64, 0x75, 0x6c, 0x65, 0x18, 0x0c, 0x20, 0x01,
	0x28, 0x09, 0x52, 0x08, 0x73, 0x63, 0x68, 0x65, 0x64, 0x75, 0x6c, 0x65, 0x22, 0x87, 0x02, 0x0a,
	0x08, 0x46, 0x69, 0x72, 0x65, 0x77, 0x61, 0x6c, 0x6c, 0x12, 0x24, 0x0a, 0x05, 0x61, 0x73, 0x73,
	0x65, 0x74, 0x18, 0x01, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x0e, 0x2e, 0x46, 0x69, 0x72, 0x65, 0x77,
	0x61, 0x6c, 0x6c, 0x41, 0x73, 0x73, 0x65, 0x74, 0x52, 0x05, 0x61, 0x73, 0x73, 0x65, 0x74, 0x12,
	0x2a, 0x0a, 0x07, 0x64, 0x65, 0x74, 0x61, 0x69, 0x6c, 0x73, 0x18, 0x02, 0x20, 0x01, 0x28, 0x0b,
	0x32, 0x10, 0x2e, 0x46, 0x69, 0x72, 0x65, 0x77, 0x61, 0x6c, 0x6c, 0x44, 0x65, 0x74, 0x61, 0x69,
	0x6c, 0x73, 0x52, 0x07, 0x64, 0x65, 0x74, 0x61, 0x69, 0x6c, 0x73, 0x12, 0x23, 0x0a, 0x05, 0x7a,
	0x6f, 0x6e, 0x65, 0x73, 0x18, 0x03, 0x20, 0x03, 0x28, 0x0b, 0x32, 0x0d, 0x2e, 0x46, 0x69, 0x72,
	0x65, 0x77, 0x61, 0x6c, 0x6c, 0x5a, 0x6f, 0x6e, 0x65, 0x52, 0x05, 0x7a, 0x6f, 0x6e, 0x65, 0x73,
	0x12, 0x32, 0x0a, 0x0a, 0x69, 0x6e, 0x74, 0x65, 0x72, 0x66, 0x61, 0x63, 0x65, 0x73, 0x18, 0x04,
	0x20, 0x03, 0x28, 0x0b, 0x32, 0x12, 0x2e, 0x46, 0x69, 0x72, 0x65, 0x77, 0x61, 0x6c, 0x6c, 0x49,
	0x6e, 0x74, 0x65, 0x72, 0x66, 0x61, 0x63, 0x65, 0x52, 0x0a, 0x69, 0x6e, 0x74, 0x65, 0x72, 0x66,
	0x61, 0x63, 0x65, 0x73, 0x12, 0x23, 0x0a, 0x05, 0x76, 0x6c, 0x61, 0x6e, 0x73, 0x18, 0x05, 0x20,
	0x03, 0x28, 0x0b, 0x32, 0x0d, 0x2e, 0x46, 0x69, 0x72, 0x65, 0x77, 0x61, 0x6c, 0x6c, 0x56, 0x4c,
	0x41, 0x4e, 0x52, 0x05, 0x76, 0x6c, 0x61, 0x6e, 0x73, 0x12, 0x2b, 0x0a, 0x08, 0x70, 0x6f, 0x6c,
	0x69, 0x63, 0x69, 0x65, 0x73, 0x18, 0x06, 0x20, 0x03, 0x28, 0x0b, 0x32, 0x0f, 0x2e, 0x46, 0x69,
	0x72, 0x65, 0x77, 0x61, 0x6c, 0x6c, 0x50, 0x6f, 0x6c, 0x69, 0x63, 0x79, 0x52, 0x08, 0x70, 0x6f,
	0x6c, 0x69, 0x63, 0x69, 0x65, 0x73, 0x22, 0x94, 0x02, 0x0a, 0x15, 0x43, 0x72, 0x65, 0x61, 0x74,
	0x65, 0x46, 0x69, 0x72, 0x65, 0x77, 0x61, 0x6c, 0x6c, 0x52, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74,
	0x12, 0x24, 0x0a, 0x05, 0x61, 0x73, 0x73, 0x65, 0x74, 0x18, 0x01, 0x20, 0x01, 0x28, 0x0b, 0x32,
	0x0e, 0x2e, 0x46, 0x69, 0x72, 0x65, 0x77, 0x61, 0x6c, 0x6c, 0x41, 0x73, 0x73, 0x65, 0x74, 0x52,
	0x05, 0x61, 0x73, 0x73, 0x65, 0x74, 0x12, 0x2a, 0x0a, 0x07, 0x64, 0x65, 0x74, 0x61, 0x69, 0x6c,
	0x73, 0x18, 0x02, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x10, 0x2e, 0x46, 0x69, 0x72, 0x65, 0x77, 0x61,
	0x6c, 0x6c, 0x44, 0x65, 0x74, 0x61, 0x69, 0x6c, 0x73, 0x52, 0x07, 0x64, 0x65, 0x74, 0x61, 0x69,
	0x6c, 0x73, 0x12, 0x23, 0x0a, 0x05, 0x7a, 0x6f, 0x6e, 0x65, 0x73, 0x18, 0x03, 0x20, 0x03, 0x28,
	0x0b, 0x32, 0x0d, 0x2e, 0x46, 0x69, 0x72, 0x65, 0x77, 0x61, 0x6c, 0x6c, 0x5a, 0x6f, 0x6e, 0x65,
	0x52, 0x05, 0x7a, 0x6f, 0x6e, 0x65, 0x73, 0x12, 0x32, 0x0a, 0x0a, 0x69, 0x6e, 0x74, 0x65, 0x72,
	0x66, 0x61, 0x63, 0x65, 0x73, 0x18, 0x04, 0x20, 0x03, 0x28, 0x0b, 0x32, 0x12, 0x2e, 0x46, 0x69,
	0x72, 0x65, 0x77, 0x61, 0x6c, 0x6c, 0x49, 0x6e, 0x74, 0x65, 0x72, 0x66, 0x61, 0x63, 0x65, 0x52,
	0x0a, 0x69, 0x6e, 0x74, 0x65, 0x72, 0x66, 0x61, 0x63, 0x65, 0x73, 0x12, 0x23, 0x0a, 0x05, 0x76,
	0x6c, 0x61, 0x6e, 0x73, 0x18, 0x05, 0x20, 0x03, 0x28, 0x0b, 0x32, 0x0d, 0x2e, 0x46, 0x69, 0x72,
	0x65, 0x77, 0x61, 0x6c, 0x6c, 0x56, 0x4c, 0x41, 0x4e, 0x52, 0x05, 0x76, 0x6c, 0x61, 0x6e, 0x73,
	0x12, 0x2b, 0x0a, 0x08, 0x70, 0x6f, 0x6c, 0x69, 0x63, 0x69, 0x65, 0x73, 0x18, 0x06, 0x20, 0x03,
	0x28, 0x0b, 0x32, 0x0f, 0x2e, 0x46, 0x69, 0x72, 0x65, 0x77, 0x61, 0x6c, 0x6c, 0x50, 0x6f, 0x6c,
	0x69, 0x63, 0x79, 0x52, 0x08, 0x70, 0x6f, 0x6c, 0x69, 0x63, 0x69, 0x65, 0x73, 0x22, 0x5c, 0x0a,
	0x16, 0x43, 0x72, 0x65, 0x61, 0x74, 0x65, 0x46, 0x69, 0x72, 0x65, 0x77, 0x61, 0x6c, 0x6c, 0x52,
	0x65, 0x73, 0x70, 0x6f, 0x6e, 0x73, 0x65, 0x12, 0x0e, 0x0a, 0x02, 0x69, 0x64, 0x18, 0x01, 0x20,
	0x01, 0x28, 0x09, 0x52, 0x02, 0x69, 0x64, 0x12, 0x18, 0x0a, 0x07, 0x73, 0x75, 0x63, 0x63, 0x65,
	0x73, 0x73, 0x18, 0x02, 0x20, 0x01, 0x28, 0x08, 0x52, 0x07, 0x73, 0x75, 0x63, 0x63, 0x65, 0x73,
	0x73, 0x12, 0x18, 0x0a, 0x07, 0x6d, 0x65, 0x73, 0x73, 0x61, 0x67, 0x65, 0x18, 0x03, 0x20, 0x01,
	0x28, 0x09, 0x52, 0x07, 0x6d, 0x65, 0x73, 0x73, 0x61, 0x67, 0x65, 0x22, 0x28, 0x0a, 0x16, 0x47,
	0x65, 0x74, 0x46, 0x69, 0x72, 0x65, 0x77, 0x61, 0x6c, 0x6c, 0x42, 0x79, 0x49, 0x44, 0x52, 0x65,
	0x71, 0x75, 0x65, 0x73, 0x74, 0x12, 0x0e, 0x0a, 0x02, 0x69, 0x64, 0x18, 0x01, 0x20, 0x01, 0x28,
	0x09, 0x52, 0x02, 0x69, 0x64, 0x22, 0x74, 0x0a, 0x17, 0x47, 0x65, 0x74, 0x46, 0x69, 0x72, 0x65,
	0x77, 0x61, 0x6c, 0x6c, 0x42, 0x79, 0x49, 0x44, 0x52, 0x65, 0x73, 0x70, 0x6f, 0x6e, 0x73, 0x65,
	0x12, 0x18, 0x0a, 0x07, 0x73, 0x75, 0x63, 0x63, 0x65, 0x73, 0x73, 0x18, 0x01, 0x20, 0x01, 0x28,
	0x08, 0x52, 0x07, 0x73, 0x75, 0x63, 0x63, 0x65, 0x73, 0x73, 0x12, 0x18, 0x0a, 0x07, 0x6d, 0x65,
	0x73, 0x73, 0x61, 0x67, 0x65, 0x18, 0x02, 0x20, 0x01, 0x28, 0x09, 0x52, 0x07, 0x6d, 0x65, 0x73,
	0x73, 0x61, 0x67, 0x65, 0x12, 0x25, 0x0a, 0x08, 0x66, 0x69, 0x72, 0x65, 0x77, 0x61, 0x6c, 0x6c,
	0x18, 0x03, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x09, 0x2e, 0x46, 0x69, 0x72, 0x65, 0x77, 0x61, 0x6c,
	0x6c, 0x52, 0x08, 0x66, 0x69, 0x72, 0x65, 0x77, 0x61, 0x6c, 0x6c, 0x22, 0xa4, 0x02, 0x0a, 0x15,
	0x55, 0x70, 0x64, 0x61, 0x74, 0x65, 0x46, 0x69, 0x72, 0x65, 0x77, 0x61, 0x6c, 0x6c, 0x52, 0x65,
	0x71, 0x75, 0x65, 0x73, 0x74, 0x12, 0x0e, 0x0a, 0x02, 0x69, 0x64, 0x18, 0x01, 0x20, 0x01, 0x28,
	0x09, 0x52, 0x02, 0x69, 0x64, 0x12, 0x24, 0x0a, 0x05, 0x61, 0x73, 0x73, 0x65, 0x74, 0x18, 0x02,
	0x20, 0x01, 0x28, 0x0b, 0x32, 0x0e, 0x2e, 0x46, 0x69, 0x72, 0x65, 0x77, 0x61, 0x6c, 0x6c, 0x41,
	0x73, 0x73, 0x65, 0x74, 0x52, 0x05, 0x61, 0x73, 0x73, 0x65, 0x74, 0x12, 0x2a, 0x0a, 0x07, 0x64,
	0x65, 0x74, 0x61, 0x69, 0x6c, 0x73, 0x18, 0x03, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x10, 0x2e, 0x46,
	0x69, 0x72, 0x65, 0x77, 0x61, 0x6c, 0x6c, 0x44, 0x65, 0x74, 0x61, 0x69, 0x6c, 0x73, 0x52, 0x07,
	0x64, 0x65, 0x74, 0x61, 0x69, 0x6c, 0x73, 0x12, 0x23, 0x0a, 0x05, 0x7a, 0x6f, 0x6e, 0x65, 0x73,
	0x18, 0x04, 0x20, 0x03, 0x28, 0x0b, 0x32, 0x0d, 0x2e, 0x46, 0x69, 0x72, 0x65, 0x77, 0x61, 0x6c,
	0x6c, 0x5a, 0x6f, 0x6e, 0x65, 0x52, 0x05, 0x7a, 0x6f, 0x6e, 0x65, 0x73, 0x12, 0x32, 0x0a, 0x0a,
	0x69, 0x6e, 0x74, 0x65, 0x72, 0x66, 0x61, 0x63, 0x65, 0x73, 0x18, 0x05, 0x20, 0x03, 0x28, 0x0b,
	0x32, 0x12, 0x2e, 0x46, 0x69, 0x72, 0x65, 0x77, 0x61, 0x6c, 0x6c, 0x49, 0x6e, 0x74, 0x65, 0x72,
	0x66, 0x61, 0x63, 0x65, 0x52, 0x0a, 0x69, 0x6e, 0x74, 0x65, 0x72, 0x66, 0x61, 0x63, 0x65, 0x73,
	0x12, 0x23, 0x0a, 0x05, 0x76, 0x6c, 0x61, 0x6e, 0x73, 0x18, 0x06, 0x20, 0x03, 0x28, 0x0b, 0x32,
	0x0d, 0x2e, 0x46, 0x69, 0x72, 0x65, 0x77, 0x61, 0x6c, 0x6c, 0x56, 0x4c, 0x41, 0x4e, 0x52, 0x05,
	0x76, 0x6c, 0x61, 0x6e, 0x73, 0x12, 0x2b, 0x0a, 0x08, 0x70, 0x6f, 0x6c, 0x69, 0x63, 0x69, 0x65,
	0x73, 0x18, 0x07, 0x20, 0x03, 0x28, 0x0b, 0x32, 0x0f, 0x2e, 0x46, 0x69, 0x72, 0x65, 0x77, 0x61,
	0x6c, 0x6c, 0x50, 0x6f, 0x6c, 0x69, 0x63, 0x79, 0x52, 0x08, 0x70, 0x6f, 0x6c, 0x69, 0x63, 0x69,
	0x65, 0x73, 0x22, 0x4c, 0x0a, 0x16, 0x55, 0x70, 0x64, 0x61, 0x74, 0x65, 0x46, 0x69, 0x72, 0x65,
	0x77, 0x61, 0x6c, 0x6c, 0x52, 0x65, 0x73, 0x70, 0x6f, 0x6e, 0x73, 0x65, 0x12, 0x18, 0x0a, 0x07,
	0x73, 0x75, 0x63, 0x63, 0x65, 0x73, 0x73, 0x18, 0x01, 0x20, 0x01, 0x28, 0x08, 0x52, 0x07, 0x73,
	0x75, 0x63, 0x63, 0x65, 0x73, 0x73, 0x12, 0x18, 0x0a, 0x07, 0x6d, 0x65, 0x73, 0x73, 0x61, 0x67,
	0x65, 0x18, 0x02, 0x20, 0x01, 0x28, 0x09, 0x52, 0x07, 0x6d, 0x65, 0x73, 0x73, 0x61, 0x67, 0x65,
	0x22, 0x27, 0x0a, 0x15, 0x44, 0x65, 0x6c, 0x65, 0x74, 0x65, 0x46, 0x69, 0x72, 0x65, 0x77, 0x61,
	0x6c, 0x6c, 0x52, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x12, 0x0e, 0x0a, 0x02, 0x69, 0x64, 0x18,
	0x01, 0x20, 0x01, 0x28, 0x09, 0x52, 0x02, 0x69, 0x64, 0x22, 0x4c, 0x0a, 0x16, 0x44, 0x65, 0x6c,
	0x65, 0x74, 0x65, 0x46, 0x69, 0x72, 0x65, 0x77, 0x61, 0x6c, 0x6c, 0x52, 0x65, 0x73, 0x70, 0x6f,
	0x6e, 0x73, 0x65, 0x12, 0x18, 0x0a, 0x07, 0x73, 0x75, 0x63, 0x63, 0x65, 0x73, 0x73, 0x18, 0x01,
	0x20, 0x01, 0x28, 0x08, 0x52, 0x07, 0x73, 0x75, 0x63, 0x63, 0x65, 0x73, 0x73, 0x12, 0x18, 0x0a,
	0x07, 0x6d, 0x65, 0x73, 0x73, 0x61, 0x67, 0x65, 0x18, 0x02, 0x20, 0x01, 0x28, 0x09, 0x52, 0x07,
	0x6d, 0x65, 0x73, 0x73, 0x61, 0x67, 0x65, 0x22, 0x2e, 0x0a, 0x1a, 0x44, 0x65, 0x6c, 0x65, 0x74,
	0x65, 0x46, 0x69, 0x72, 0x65, 0x77, 0x61, 0x6c, 0x6c, 0x42, 0x61, 0x74, 0x63, 0x68, 0x52, 0x65,
	0x71, 0x75, 0x65, 0x73, 0x74, 0x12, 0x10, 0x0a, 0x03, 0x69, 0x64, 0x73, 0x18, 0x01, 0x20, 0x03,
	0x28, 0x09, 0x52, 0x03, 0x69, 0x64, 0x73, 0x22, 0x51, 0x0a, 0x1b, 0x44, 0x65, 0x6c, 0x65, 0x74,
	0x65, 0x46, 0x69, 0x72, 0x65, 0x77, 0x61, 0x6c, 0x6c, 0x42, 0x61, 0x74, 0x63, 0x68, 0x52, 0x65,
	0x73, 0x70, 0x6f, 0x6e, 0x73, 0x65, 0x12, 0x18, 0x0a, 0x07, 0x73, 0x75, 0x63, 0x63, 0x65, 0x73,
	0x73, 0x18, 0x01, 0x20, 0x01, 0x28, 0x08, 0x52, 0x07, 0x73, 0x75, 0x63, 0x63, 0x65, 0x73, 0x73,
	0x12, 0x18, 0x0a, 0x07, 0x6d, 0x65, 0x73, 0x73, 0x61, 0x67, 0x65, 0x18, 0x02, 0x20, 0x01, 0x28,
	0x09, 0x52, 0x07, 0x6d, 0x65, 0x73, 0x73, 0x61, 0x67, 0x65, 0x22, 0x1b, 0x0a, 0x19, 0x44, 0x65,
	0x6c, 0x65, 0x74, 0x65, 0x41, 0x6c, 0x6c, 0x46, 0x69, 0x72, 0x65, 0x77, 0x61, 0x6c, 0x6c, 0x73,
	0x52, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x22, 0x50, 0x0a, 0x1a, 0x44, 0x65, 0x6c, 0x65, 0x74,
	0x65, 0x41, 0x6c, 0x6c, 0x46, 0x69, 0x72, 0x65, 0x77, 0x61, 0x6c, 0x6c, 0x73, 0x52, 0x65, 0x73,
	0x70, 0x6f, 0x6e, 0x73, 0x65, 0x12, 0x18, 0x0a, 0x07, 0x73, 0x75, 0x63, 0x63, 0x65, 0x73, 0x73,
	0x18, 0x01, 0x20, 0x01, 0x28, 0x08, 0x52, 0x07, 0x73, 0x75, 0x63, 0x63, 0x65, 0x73, 0x73, 0x12,
	0x18, 0x0a, 0x07, 0x6d, 0x65, 0x73, 0x73, 0x61, 0x67, 0x65, 0x18, 0x02, 0x20, 0x01, 0x28, 0x09,
	0x52, 0x07, 0x6d, 0x65, 0x73, 0x73, 0x61, 0x67, 0x65, 0x22, 0x90, 0x06, 0x0a, 0x14, 0x46, 0x69,
	0x72, 0x65, 0x77, 0x61, 0x6c, 0x6c, 0x4c, 0x69, 0x73, 0x74, 0x49, 0x74, 0x65, 0x6d, 0x46, 0x6c,
	0x61, 0x74, 0x12, 0x19, 0x0a, 0x08, 0x61, 0x73, 0x73, 0x65, 0x74, 0x5f, 0x69, 0x64, 0x18, 0x01,
	0x20, 0x01, 0x28, 0x09, 0x52, 0x07, 0x61, 0x73, 0x73, 0x65, 0x74, 0x49, 0x64, 0x12, 0x1f, 0x0a,
	0x0b, 0x76, 0x65, 0x6e, 0x64, 0x6f, 0x72, 0x5f, 0x63, 0x6f, 0x64, 0x65, 0x18, 0x02, 0x20, 0x01,
	0x28, 0x09, 0x52, 0x0a, 0x76, 0x65, 0x6e, 0x64, 0x6f, 0x72, 0x43, 0x6f, 0x64, 0x65, 0x12, 0x12,
	0x0a, 0x04, 0x6e, 0x61, 0x6d, 0x65, 0x18, 0x03, 0x20, 0x01, 0x28, 0x09, 0x52, 0x04, 0x6e, 0x61,
	0x6d, 0x65, 0x12, 0x16, 0x0a, 0x06, 0x64, 0x6f, 0x6d, 0x61, 0x69, 0x6e, 0x18, 0x04, 0x20, 0x01,
	0x28, 0x09, 0x52, 0x06, 0x64, 0x6f, 0x6d, 0x61, 0x69, 0x6e, 0x12, 0x1a, 0x0a, 0x08, 0x68, 0x6f,
	0x73, 0x74, 0x6e, 0x61, 0x6d, 0x65, 0x18, 0x05, 0x20, 0x01, 0x28, 0x09, 0x52, 0x08, 0x68, 0x6f,
	0x73, 0x74, 0x6e, 0x61, 0x6d, 0x65, 0x12, 0x17, 0x0a, 0x07, 0x6f, 0x73, 0x5f, 0x6e, 0x61, 0x6d,
	0x65, 0x18, 0x06, 0x20, 0x01, 0x28, 0x09, 0x52, 0x06, 0x6f, 0x73, 0x4e, 0x61, 0x6d, 0x65, 0x12,
	0x1d, 0x0a, 0x0a, 0x6f, 0x73, 0x5f, 0x76, 0x65, 0x72, 0x73, 0x69, 0x6f, 0x6e, 0x18, 0x07, 0x20,
	0x01, 0x28, 0x09, 0x52, 0x09, 0x6f, 0x73, 0x56, 0x65, 0x72, 0x73, 0x69, 0x6f, 0x6e, 0x12, 0x20,
	0x0a, 0x0b, 0x64, 0x65, 0x73, 0x63, 0x72, 0x69, 0x70, 0x74, 0x69, 0x6f, 0x6e, 0x18, 0x08, 0x20,
	0x01, 0x28, 0x09, 0x52, 0x0b, 0x64, 0x65, 0x73, 0x63, 0x72, 0x69, 0x70, 0x74, 0x69, 0x6f, 0x6e,
	0x12, 0x1d, 0x0a, 0x0a, 0x61, 0x73, 0x73, 0x65, 0x74, 0x5f, 0x74, 0x79, 0x70, 0x65, 0x18, 0x09,
	0x20, 0x01, 0x28, 0x09, 0x52, 0x09, 0x61, 0x73, 0x73, 0x65, 0x74, 0x54, 0x79, 0x70, 0x65, 0x12,
	0x23, 0x0a, 0x0d, 0x64, 0x69, 0x73, 0x63, 0x6f, 0x76, 0x65, 0x72, 0x65, 0x64, 0x5f, 0x62, 0x79,
	0x18, 0x0a, 0x20, 0x01, 0x28, 0x09, 0x52, 0x0c, 0x64, 0x69, 0x73, 0x63, 0x6f, 0x76, 0x65, 0x72,
	0x65, 0x64, 0x42, 0x79, 0x12, 0x12, 0x0a, 0x04, 0x72, 0x69, 0x73, 0x6b, 0x18, 0x0b, 0x20, 0x01,
	0x28, 0x05, 0x52, 0x04, 0x72, 0x69, 0x73, 0x6b, 0x12, 0x2b, 0x0a, 0x11, 0x6c, 0x6f, 0x67, 0x67,
	0x69, 0x6e, 0x67, 0x5f, 0x63, 0x6f, 0x6d, 0x70, 0x6c, 0x65, 0x74, 0x65, 0x64, 0x18, 0x0c, 0x20,
	0x01, 0x28, 0x08, 0x52, 0x10, 0x6c, 0x6f, 0x67, 0x67, 0x69, 0x6e, 0x67, 0x43, 0x6f, 0x6d, 0x70,
	0x6c, 0x65, 0x74, 0x65, 0x64, 0x12, 0x1f, 0x0a, 0x0b, 0x61, 0x73, 0x73, 0x65, 0x74, 0x5f, 0x76,
	0x61, 0x6c, 0x75, 0x65, 0x18, 0x0d, 0x20, 0x01, 0x28, 0x01, 0x52, 0x0a, 0x61, 0x73, 0x73, 0x65,
	0x74, 0x56, 0x61, 0x6c, 0x75, 0x65, 0x12, 0x1d, 0x0a, 0x0a, 0x64, 0x65, 0x74, 0x61, 0x69, 0x6c,
	0x73, 0x5f, 0x69, 0x64, 0x18, 0x0e, 0x20, 0x01, 0x28, 0x09, 0x52, 0x09, 0x64, 0x65, 0x74, 0x61,
	0x69, 0x6c, 0x73, 0x49, 0x64, 0x12, 0x14, 0x0a, 0x05, 0x6d, 0x6f, 0x64, 0x65, 0x6c, 0x18, 0x0f,
	0x20, 0x01, 0x28, 0x09, 0x52, 0x05, 0x6d, 0x6f, 0x64, 0x65, 0x6c, 0x12, 0x29, 0x0a, 0x10, 0x66,
	0x69, 0x72, 0x6d, 0x77, 0x61, 0x72, 0x65, 0x5f, 0x76, 0x65, 0x72, 0x73, 0x69, 0x6f, 0x6e, 0x18,
	0x10, 0x20, 0x01, 0x28, 0x09, 0x52, 0x0f, 0x66, 0x69, 0x72, 0x6d, 0x77, 0x61, 0x72, 0x65, 0x56,
	0x65, 0x72, 0x73, 0x69, 0x6f, 0x6e, 0x12, 0x23, 0x0a, 0x0d, 0x73, 0x65, 0x72, 0x69, 0x61, 0x6c,
	0x5f, 0x6e, 0x75, 0x6d, 0x62, 0x65, 0x72, 0x18, 0x11, 0x20, 0x01, 0x28, 0x09, 0x52, 0x0c, 0x73,
	0x65, 0x72, 0x69, 0x61, 0x6c, 0x4e, 0x75, 0x6d, 0x62, 0x65, 0x72, 0x12, 0x22, 0x0a, 0x0d, 0x69,
	0x73, 0x5f, 0x68, 0x61, 0x5f, 0x65, 0x6e, 0x61, 0x62, 0x6c, 0x65, 0x64, 0x18, 0x12, 0x20, 0x01,
	0x28, 0x08, 0x52, 0x0b, 0x69, 0x73, 0x48, 0x61, 0x45, 0x6e, 0x61, 0x62, 0x6c, 0x65, 0x64, 0x12,
	0x17, 0x0a, 0x07, 0x68, 0x61, 0x5f, 0x72, 0x6f, 0x6c, 0x65, 0x18, 0x13, 0x20, 0x01, 0x28, 0x09,
	0x52, 0x06, 0x68, 0x61, 0x52, 0x6f, 0x6c, 0x65, 0x12, 0x23, 0x0a, 0x0d, 0x6d, 0x61, 0x6e, 0x61,
	0x67, 0x65, 0x6d, 0x65, 0x6e, 0x74, 0x5f, 0x69, 0x70, 0x18, 0x14, 0x20, 0x01, 0x28, 0x09, 0x52,
	0x0c, 0x6d, 0x61, 0x6e, 0x61, 0x67, 0x65, 0x6d, 0x65, 0x6e, 0x74, 0x49, 0x70, 0x12, 0x1b, 0x0a,
	0x09, 0x73, 0x69, 0x74, 0x65, 0x5f, 0x6e, 0x61, 0x6d, 0x65, 0x18, 0x15, 0x20, 0x01, 0x28, 0x09,
	0x52, 0x08, 0x73, 0x69, 0x74, 0x65, 0x4e, 0x61, 0x6d, 0x65, 0x12, 0x1a, 0x0a, 0x08, 0x6c, 0x6f,
	0x63, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0x18, 0x16, 0x20, 0x01, 0x28, 0x09, 0x52, 0x08, 0x6c, 0x6f,
	0x63, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0x12, 0x16, 0x0a, 0x06, 0x73, 0x74, 0x61, 0x74, 0x75, 0x73,
	0x18, 0x17, 0x20, 0x01, 0x28, 0x09, 0x52, 0x06, 0x73, 0x74, 0x61, 0x74, 0x75, 0x73, 0x12, 0x1b,
	0x0a, 0x09, 0x6c, 0x61, 0x73, 0x74, 0x5f, 0x73, 0x79, 0x6e, 0x63, 0x18, 0x18, 0x20, 0x01, 0x28,
	0x09, 0x52, 0x08, 0x6c, 0x61, 0x73, 0x74, 0x53, 0x79, 0x6e, 0x63, 0x12, 0x1f, 0x0a, 0x0b, 0x73,
	0x79, 0x6e, 0x63, 0x5f, 0x73, 0x74, 0x61, 0x74, 0x75, 0x73, 0x18, 0x19, 0x20, 0x01, 0x28, 0x09,
	0x52, 0x0a, 0x73, 0x79, 0x6e, 0x63, 0x53, 0x74, 0x61, 0x74, 0x75, 0x73, 0x22, 0x40, 0x0a, 0x14,
	0x4c, 0x69, 0x73, 0x74, 0x46, 0x69, 0x72, 0x65, 0x77, 0x61, 0x6c, 0x6c, 0x73, 0x52, 0x65, 0x71,
	0x75, 0x65, 0x73, 0x74, 0x12, 0x14, 0x0a, 0x05, 0x6c, 0x69, 0x6d, 0x69, 0x74, 0x18, 0x01, 0x20,
	0x01, 0x28, 0x05, 0x52, 0x05, 0x6c, 0x69, 0x6d, 0x69, 0x74, 0x12, 0x12, 0x0a, 0x04, 0x70, 0x61,
	0x67, 0x65, 0x18, 0x02, 0x20, 0x01, 0x28, 0x05, 0x52, 0x04, 0x70, 0x61, 0x67, 0x65, 0x22, 0x60,
	0x0a, 0x15, 0x4c, 0x69, 0x73, 0x74, 0x46, 0x69, 0x72, 0x65, 0x77, 0x61, 0x6c, 0x6c, 0x73, 0x52,
	0x65, 0x73, 0x70, 0x6f, 0x6e, 0x73, 0x65, 0x12, 0x31, 0x0a, 0x08, 0x63, 0x6f, 0x6e, 0x74, 0x65,
	0x6e, 0x74, 0x73, 0x18, 0x01, 0x20, 0x03, 0x28, 0x0b, 0x32, 0x15, 0x2e, 0x46, 0x69, 0x72, 0x65,
	0x77, 0x61, 0x6c, 0x6c, 0x4c, 0x69, 0x73, 0x74, 0x49, 0x74, 0x65, 0x6d, 0x46, 0x6c, 0x61, 0x74,
	0x52, 0x08, 0x63, 0x6f, 0x6e, 0x74, 0x65, 0x6e, 0x74, 0x73, 0x12, 0x14, 0x0a, 0x05, 0x63, 0x6f,
	0x75, 0x6e, 0x74, 0x18, 0x02, 0x20, 0x01, 0x28, 0x05, 0x52, 0x05, 0x63, 0x6f, 0x75, 0x6e, 0x74,
	0x42, 0x3a, 0x5a, 0x38, 0x67, 0x69, 0x74, 0x6c, 0x61, 0x62, 0x2e, 0x61, 0x70, 0x6b, 0x2d, 0x67,
	0x72, 0x6f, 0x75, 0x70, 0x2e, 0x6e, 0x65, 0x74, 0x2f, 0x73, 0x69, 0x65, 0x6d, 0x2f, 0x62, 0x61,
	0x63, 0x6b, 0x65, 0x6e, 0x64, 0x2f, 0x61, 0x73, 0x73, 0x65, 0x74, 0x2d, 0x64, 0x69, 0x73, 0x63,
	0x6f, 0x76, 0x65, 0x72, 0x79, 0x2f, 0x61, 0x70, 0x69, 0x2f, 0x70, 0x62, 0x62, 0x06, 0x70, 0x72,
	0x6f, 0x74, 0x6f, 0x33,
})

var (
	file_firewall_proto_rawDescOnce sync.Once
	file_firewall_proto_rawDescData []byte
)

func file_firewall_proto_rawDescGZIP() []byte {
	file_firewall_proto_rawDescOnce.Do(func() {
		file_firewall_proto_rawDescData = protoimpl.X.CompressGZIP(unsafe.Slice(unsafe.StringData(file_firewall_proto_rawDesc), len(file_firewall_proto_rawDesc)))
	})
	return file_firewall_proto_rawDescData
}

var file_firewall_proto_msgTypes = make([]protoimpl.MessageInfo, 24)
var file_firewall_proto_goTypes = []any{
	(*SecondaryIP)(nil),                 // 0: SecondaryIP
	(*ZoneInterfaces)(nil),              // 1: ZoneInterfaces
	(*FirewallAsset)(nil),               // 2: FirewallAsset
	(*FirewallDetails)(nil),             // 3: FirewallDetails
	(*FirewallZone)(nil),                // 4: FirewallZone
	(*FirewallInterface)(nil),           // 5: FirewallInterface
	(*FirewallVLAN)(nil),                // 6: FirewallVLAN
	(*FirewallPolicy)(nil),              // 7: FirewallPolicy
	(*Firewall)(nil),                    // 8: Firewall
	(*CreateFirewallRequest)(nil),       // 9: CreateFirewallRequest
	(*CreateFirewallResponse)(nil),      // 10: CreateFirewallResponse
	(*GetFirewallByIDRequest)(nil),      // 11: GetFirewallByIDRequest
	(*GetFirewallByIDResponse)(nil),     // 12: GetFirewallByIDResponse
	(*UpdateFirewallRequest)(nil),       // 13: UpdateFirewallRequest
	(*UpdateFirewallResponse)(nil),      // 14: UpdateFirewallResponse
	(*DeleteFirewallRequest)(nil),       // 15: DeleteFirewallRequest
	(*DeleteFirewallResponse)(nil),      // 16: DeleteFirewallResponse
	(*DeleteFirewallBatchRequest)(nil),  // 17: DeleteFirewallBatchRequest
	(*DeleteFirewallBatchResponse)(nil), // 18: DeleteFirewallBatchResponse
	(*DeleteAllFirewallsRequest)(nil),   // 19: DeleteAllFirewallsRequest
	(*DeleteAllFirewallsResponse)(nil),  // 20: DeleteAllFirewallsResponse
	(*FirewallListItemFlat)(nil),        // 21: FirewallListItemFlat
	(*ListFirewallsRequest)(nil),        // 22: ListFirewallsRequest
	(*ListFirewallsResponse)(nil),       // 23: ListFirewallsResponse
}
var file_firewall_proto_depIdxs = []int32{
	1,  // 0: FirewallZone.interfaces:type_name -> ZoneInterfaces
	0,  // 1: FirewallInterface.secondary_ips:type_name -> SecondaryIP
	2,  // 2: Firewall.asset:type_name -> FirewallAsset
	3,  // 3: Firewall.details:type_name -> FirewallDetails
	4,  // 4: Firewall.zones:type_name -> FirewallZone
	5,  // 5: Firewall.interfaces:type_name -> FirewallInterface
	6,  // 6: Firewall.vlans:type_name -> FirewallVLAN
	7,  // 7: Firewall.policies:type_name -> FirewallPolicy
	2,  // 8: CreateFirewallRequest.asset:type_name -> FirewallAsset
	3,  // 9: CreateFirewallRequest.details:type_name -> FirewallDetails
	4,  // 10: CreateFirewallRequest.zones:type_name -> FirewallZone
	5,  // 11: CreateFirewallRequest.interfaces:type_name -> FirewallInterface
	6,  // 12: CreateFirewallRequest.vlans:type_name -> FirewallVLAN
	7,  // 13: CreateFirewallRequest.policies:type_name -> FirewallPolicy
	8,  // 14: GetFirewallByIDResponse.firewall:type_name -> Firewall
	2,  // 15: UpdateFirewallRequest.asset:type_name -> FirewallAsset
	3,  // 16: UpdateFirewallRequest.details:type_name -> FirewallDetails
	4,  // 17: UpdateFirewallRequest.zones:type_name -> FirewallZone
	5,  // 18: UpdateFirewallRequest.interfaces:type_name -> FirewallInterface
	6,  // 19: UpdateFirewallRequest.vlans:type_name -> FirewallVLAN
	7,  // 20: UpdateFirewallRequest.policies:type_name -> FirewallPolicy
	21, // 21: ListFirewallsResponse.contents:type_name -> FirewallListItemFlat
	22, // [22:22] is the sub-list for method output_type
	22, // [22:22] is the sub-list for method input_type
	22, // [22:22] is the sub-list for extension type_name
	22, // [22:22] is the sub-list for extension extendee
	0,  // [0:22] is the sub-list for field type_name
}

func init() { file_firewall_proto_init() }
func file_firewall_proto_init() {
	if File_firewall_proto != nil {
		return
	}
	type x struct{}
	out := protoimpl.TypeBuilder{
		File: protoimpl.DescBuilder{
			GoPackagePath: reflect.TypeOf(x{}).PkgPath(),
			RawDescriptor: unsafe.Slice(unsafe.StringData(file_firewall_proto_rawDesc), len(file_firewall_proto_rawDesc)),
			NumEnums:      0,
			NumMessages:   24,
			NumExtensions: 0,
			NumServices:   0,
		},
		GoTypes:           file_firewall_proto_goTypes,
		DependencyIndexes: file_firewall_proto_depIdxs,
		MessageInfos:      file_firewall_proto_msgTypes,
	}.Build()
	File_firewall_proto = out.File
	file_firewall_proto_goTypes = nil
	file_firewall_proto_depIdxs = nil
}
